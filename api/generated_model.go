// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-04-16 13:00:23.938368 +0100 BST m=+0.025200043
package api


type ListSelectionsChangedSinceRequest struct {

    SelectionSequenceNumber int64 
}

type ListSelectionsChangedSince struct {

    listSelectionsChangedSinceRequest ListSelectionsChangedSinceRequest 
}

type ReturnStatus struct {

    Code int64 
    Description string 
    CallId string 
    ExtraInformation string 
}

type BaseResponse struct {

    ReturnStatus []ReturnStatus 
    Timestamp []string 
}

type SettlementInformationType struct {

    SettledTime string 
    VoidPercentage string 
    LeftSideFactor string 
    RightSideFactor string 
    SettlementResultString string 
}

type ListSelectionsChangedSinceResponseItem struct {

    Id int64 
    Name string 
    DisplayOrder int64 
    IsHidden bool 
    Status int64 
    ResetCount int64 
    WithdrawalFactor string 
    MarketId int64 
    SelectionSequenceNumber int64 
    CancelOrdersTime string 
    SettlementInformation []SettlementInformationType 
}

type ListSelectionsChangedSinceResult struct {

    *BaseResponse  
    Selections []ListSelectionsChangedSinceResponseItem 
}

type ListSelectionsChangedSinceResponse struct {

    ListSelectionsChangedSinceResult ListSelectionsChangedSinceResult 
}

type ListTopLevelEventsRequest struct {

    WantPlayMarkets bool 
}

type ListTopLevelEvents struct {

    listTopLevelEventsRequest ListTopLevelEventsRequest 
}

type SelectionType struct {

    Id int64 
    Name string 
    Status int64 
    ResetCount int64 
    DeductionFactor string 
    DisplayOrder int64 
}

type MarketType struct {

    Id int64 
    Name string 
    Type int64 
    IsPlayMarket bool 
    // Inactive(1), Active(2), Suspended(3), Withdrawn(4), BallotedOut(9), Voided(5), Completed(6), Settled(8)
    Status int64 
    NumberOfWinningSelections int64 
    StartTime string 
    WithdrawalSequenceNumber int64 
    DisplayOrder int64 
    IsEnabledForMultiples bool 
    IsInRunningAllowed bool 
    RaceGrade string 
    IsManagedWhenInRunning bool 
    IsCurrentlyInRunning bool 
    InRunningDelaySeconds int64 
    EventClassifierId int64 
    PlacePayout string 
    Selections []SelectionType 
}

type EventClassifierType struct {

    Id int64 
    Name string 
    DisplayOrder int64 
    IsEnabledForMultiples bool 
    ParentId int64 
    EventClassifiers []EventClassifierType 
    Markets []MarketType 
}

type ListTopLevelEventsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type ListTopLevelEventsResponse struct {

    ListTopLevelEventsResult ListTopLevelEventsResult 
}

type GetEventSubTreeWithSelectionsRequest struct {

    WantPlayMarkets bool 
    EventClassifierIds []int64 
}

type GetEventSubTreeWithSelections struct {

    getEventSubTreeWithSelectionsRequest GetEventSubTreeWithSelectionsRequest 
}

type GetEventSubTreeWithSelectionsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type GetEventSubTreeWithSelectionsResponse struct {

    GetEventSubTreeWithSelectionsResult GetEventSubTreeWithSelectionsResult 
}

type GetEventSubTreeNoSelectionsRequest struct {

    WantDirectDescendentsOnly bool 
    WantPlayMarkets bool 
    EventClassifierIds []int64 
}

type GetEventSubTreeNoSelections struct {

    getEventSubTreeNoSelectionsRequest GetEventSubTreeNoSelectionsRequest 
}

type GetEventSubTreeNoSelectionsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type GetEventSubTreeNoSelectionsResponse struct {

    GetEventSubTreeNoSelectionsResult GetEventSubTreeNoSelectionsResult 
}

type GetMarketInformationRequest struct {

}

type GetMarketInformation struct {

    getMarketInformationRequest GetMarketInformationRequest 
}

type GetMarketInformationResult struct {

    *BaseResponse  
    Markets []MarketType 
}

type GetMarketInformationResponse struct {

    GetMarketInformationResult GetMarketInformationResult 
}

type ListMarketWithdrawalHistoryRequest struct {

    MarketId int64 
}

type ListMarketWithdrawalHistory struct {

    listMarketWithdrawalHistoryRequest ListMarketWithdrawalHistoryRequest 
}

type ListMarketWithdrawalHistoryResponseItem struct {

    SelectionId int64 
    WithdrawalTime string 
    SequenceNumber int64 
    ReductionFactor string 
    CompoundReductionFactor string 
}

type ListMarketWithdrawalHistoryResult struct {

    *BaseResponse  
    Withdrawals []ListMarketWithdrawalHistoryResponseItem 
}

type ListMarketWithdrawalHistoryResponse struct {

    ListMarketWithdrawalHistoryResult ListMarketWithdrawalHistoryResult 
}

type GetPricesRequest struct {

    ThresholdAmount string 
    NumberForPricesRequired int64 
    NumberAgainstPricesRequired int64 
    WantMarketMatchedAmount bool 
    WantSelectionsMatchedAmounts bool 
    WantSelectionMatchedDetails bool 
    MarketIds []int64 
}

type GetPrices struct {

    getPricesRequest GetPricesRequest 
}

type PricesType struct {

    Price string 
    Stake string 
}

type SelectionTypeWithPrices struct {

    Id int64 
    Name string 
    Status int64 
    ResetCount int64 
    DeductionFactor string 
    MatchedSelectionForStake string 
    SelectionOpenInterest string 
    MarketWinnings string 
    MarketPositiveWinnings string 
    MatchedSelectionAgainstStake string 
    LastMatchedOccurredAt string 
    LastMatchedPrice string 
    LastMatchedForSideAmount string 
    LastMatchedAgainstSideAmount string 
    MatchedForSideAmountAtSamePrice string 
    MatchedAgainstSideAmountAtSamePrice string 
    FirstMatchAtSamePriceOccurredAt string 
    NumberOrders int64 
    NumberPunters int64 
    ForSidePrices []PricesType 
    AgainstSidePrices []PricesType 
}

type MarketTypeWithPrices struct {

    Id int64 
    Name string 
    Type int64 
    IsPlayMarket bool 
    Status int64 
    NumberOfWinningSelections int64 
    StartTime string 
    WithdrawalSequenceNumber int64 
    DisplayOrder int64 
    IsEnabledForMultiples bool 
    IsInRunningAllowed bool 
    IsManagedWhenInRunning bool 
    IsCurrentlyInRunning bool 
    InRunningDelaySeconds int64 
    ReturnCode int64 
    TotalMatchedAmount string 
    PlacePayout string 
    MatchedMarketForStake string 
    MatchedMarketAgainstStake string 
    HomeTeamScore int64 
    AwayTeamScore int64 
    ScoreType int64 
    Selections []SelectionTypeWithPrices 
}

type GetPricesResult struct {

    *BaseResponse  
    MarketPrices []MarketTypeWithPrices 
}

type GetPricesResponse struct {

    GetPricesResult GetPricesResult 
}

type GetOddsLadderRequest struct {

    PriceFormat int64 
}

type GetOddsLadder struct {

    getOddsLadderRequest GetOddsLadderRequest 
}

type GetOddsLadderResponseItem struct {

    price string 
    representation string 
}

type GetOddsLadderResult struct {

    *BaseResponse  
    Ladder []GetOddsLadderResponseItem 
}

type GetOddsLadderResponse struct {

    GetOddsLadderResult GetOddsLadderResult 
}

type GetCurrentSelectionSequenceNumberRequest struct {

}

type GetCurrentSelectionSequenceNumber struct {

    getCurrentSelectionSequenceNumberRequest GetCurrentSelectionSequenceNumberRequest 
}

type GetCurrentSelectionSequenceNumberResult struct {

    *BaseResponse  
    SelectionSequenceNumber int64 
}

type GetCurrentSelectionSequenceNumberResponse struct {

    GetCurrentSelectionSequenceNumberResult GetCurrentSelectionSequenceNumberResult 
}

type SelectionTradesRequestItem struct {

    selectionId int64 
    fromTradeId int64 
}

type ListSelectionTradesRequest struct {

    currency string 
    selectionRequests []SelectionTradesRequestItem 
}

type ListSelectionTrades struct {

    listSelectionTradesRequest ListSelectionTradesRequest 
}

type TradeItemType struct {

    occurredAt string 
    price string 
    backersStake string 
    layersLiability string 
    // Back(1), Lay(2)
    tradeType int64 
}

type ListSelectionTradesResponseItem struct {

    selectionId int64 
    maxTradeId int64 
    maxTradeIdReturned int64 
    TradeItems []TradeItemType 
}

type ListSelectionTradesResult struct {

    *BaseResponse  
    SelectionTrades []ListSelectionTradesResponseItem 
}

type ListSelectionTradesResponse struct {

    ListSelectionTradesResult ListSelectionTradesResult 
}

type GetSPEnabledMarketsInformationRequest struct {

}

type GetSPEnabledMarketsInformation struct {

    GetSPEnabledMarketsInformationRequest GetSPEnabledMarketsInformationRequest 
}

type GetSPEnabledMarketsInformationResult_SPEnabledEvent_MarketTypeIds struct {

    MarketTypeId []int64 
}

type GetSPEnabledMarketsInformationResult_SPEnabledEvent struct {

    MarketTypeIds []GetSPEnabledMarketsInformationResult_SPEnabledEvent_MarketTypeIds 
}

type GetSPEnabledMarketsInformationResult struct {

    *BaseResponse  
    SPEnabledEvent []GetSPEnabledMarketsInformationResult_SPEnabledEvent 
}

type GetSPEnabledMarketsInformationResponse struct {

    GetSPEnabledMarketsInformationResult GetSPEnabledMarketsInformationResult 
}

type ListBootstrapOrdersRequest struct {

    SequenceNumber []int64 
    wantSettledOrdersOnUnsettledMarkets []bool 
}

type ListBootstrapOrders struct {

    listBootstrapOrdersRequest ListBootstrapOrdersRequest 
}

type OrderCommissionInformationType struct {

    GrossSettlementAmount string 
    OrderCommission string 
}

type Order struct {

    Id int64 
    MarketId int64 
    SelectionId int64 
    SequenceNumber int64 
    IssuedAt string 
    Polarity int64 
    UnmatchedStake string 
    RequestedPrice string 
    MatchedPrice string 
    MatchedStake string 
    TotalForSideMakeStake string 
    TotalForSideTakeStake string 
    MatchedAgainstStake string 
    Status int64 
    RestrictOrderToBroker bool 
    PunterReferenceNumber int64 
    CancelOnInRunning bool 
    CancelIfSelectionReset bool 
    IsCurrentlyInRunning bool 
    PunterCommissionBasis int64 
    MakeCommissionRate string 
    TakeCommissionRate string 
    ExpectedSelectionResetCount int64 
    ExpectedWithdrawalSequenceNumber int64 
    OrderFillType int64 
    FillOrKillThreshold string 
    OrderCommissionInformation []OrderCommissionInformationType 
}

type ListBootstrapOrdersResult_Orders struct {

    Order []Order 
}

type ListBootstrapOrdersResult struct {

    *BaseResponse  
    MaximumSequenceNumber int64 
    Orders []ListBootstrapOrdersResult_Orders 
}

type ListBootstrapOrdersResponse struct {

    ListBootstrapOrdersResult ListBootstrapOrdersResult 
}

type ListOrdersChangedSinceRequest struct {

    SequenceNumber []int64 
}

type ListOrdersChangedSince struct {

    listOrdersChangedSinceRequest ListOrdersChangedSinceRequest 
}

type ListOrdersChangedSinceResult_Orders struct {

    Order []Order 
}

type ListOrdersChangedSinceResult struct {

    *BaseResponse  
    Orders []ListOrdersChangedSinceResult_Orders 
}

type ListOrdersChangedSinceResponse struct {

    ListOrdersChangedSinceResult ListOrdersChangedSinceResult 
}

type SimpleOrderRequest struct {

    SelectionId int64 
    Stake string 
    Price string 
    Polarity int64 
    // This value must be set to the SelectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the ExpectedSelectionResetCount that you submit to the server is not the same as the SelectionResetCount that is on the server, then your bet will NOT be accepted, and you will get an error.
    ExpectedSelectionResetCount int64 
    // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
    ExpectedWithdrawalSequenceNumber int64 
    // The effect of this option when set to true is to cancel any unmatched orders when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
    CancelOnInRunning bool 
    // The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
    CancelIfSelectionReset bool 
    // An expires at value set in the past will cause the bet to be cancelled - although  the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
    ExpiresAt string 
    // Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 
    KillType int64 
    // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
    FillOrKillThreshold string 
    // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
    RestrictOrderToBroker bool 
    // For internal use only
    ChannelTypeInfo string 
    PunterReferenceNumber int64 
}

type PlaceOrdersNoReceiptRequest_Orders struct {

    Order []SimpleOrderRequest 
}

type PlaceOrdersNoReceiptRequest struct {

    Orders []PlaceOrdersNoReceiptRequest_Orders 
    WantAllOrNothingBehaviour []bool 
}

type PlaceOrdersNoReceipt struct {

    placeOrdersNoReceiptRequest PlaceOrdersNoReceiptRequest 
}

type PlaceOrdersNoReceiptResult_OrderHandles struct {

    OrderHandle []int64 
}

type PlaceOrdersNoReceiptResponseItem struct {

    OrderHandle int64 
    ReturnCode int64 
    PunterReferenceNumber int64 
}

type PlaceOrdersNoReceiptResult_Orders struct {

    Order []PlaceOrdersNoReceiptResponseItem 
}

type PlaceOrdersNoReceiptResult struct {

    *BaseResponse  
    OrderHandles []PlaceOrdersNoReceiptResult_OrderHandles 
    Orders []PlaceOrdersNoReceiptResult_Orders 
}

type PlaceOrdersNoReceiptResponse struct {

    PlaceOrdersNoReceiptResult PlaceOrdersNoReceiptResult 
}

type PlaceOrdersWithReceiptRequestItem struct {

    SelectionId int64 
    Stake string 
    Price string 
    Polarity int64 
    // This value must be set to the selectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedSelectionResetCount that you submit to the server is not the same as the selectionResetCount that is on the server, then your bet will NOT be accepted, and you will get a 300 error.
    ExpectedSelectionResetCount int64 
    // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
    ExpectedWithdrawalSequenceNumber int64 
    // FillAndKill=2, FillOrKill=3, FillOrKillDontCancel=4, SPIfUnmatched=5
    KillType int64 
    // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
    FillOrKillThreshold string 
    
    /*
     
              The effect of this option when set to true is to cancel any unmatched bets when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
              This field is required only if killType is set to FillOrKillDontCancel.
            
     */
    CancelOnInRunning bool 
    
    /*
     
              The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
              This field is required only if killType is set to FillOrKillDontCancel.
            
     */
    CancelIfSelectionReset bool 
    // This field is required only if killType is set to FillOrKillDontCancel. Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 
    
    /*
     
              An expires at value set in the past will cause the bet to be cancelled - although the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
              This field is optional if killType is set to FillOrKillDontCancel, otherwise not needed at all.
            
     */
    ExpiresAt string 
    // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
    RestrictOrderToBroker bool 
    // For internal use only
    ChannelTypeInfo string 
    PunterReferenceNumber int64 
}

type PlaceOrdersWithReceiptRequest_Orders struct {

    Order []PlaceOrdersWithReceiptRequestItem 
}

type PlaceOrdersWithReceiptRequest struct {

    Orders []PlaceOrdersWithReceiptRequest_Orders 
}

type PlaceOrdersWithReceipt struct {

    orders PlaceOrdersWithReceiptRequest 
}

type PlaceOrdersWithReceiptResponseItem struct {

    Status int64 
    MatchedAgainstStake string 
    MatchedStake string 
    MatchedPrice string 
    UnmatchedStake string 
    Polarity int64 
    IssuedAt string 
    SequenceNumber int64 
    // Deprecated attribute.
    SelectionId int64 
    PunterReferenceNumber int64 
    OrderHandle int64 
}

type PlaceOrdersWithReceiptResult_Orders struct {

    Order []PlaceOrdersWithReceiptResponseItem 
}

type PlaceOrdersWithReceiptResult struct {

    *BaseResponse  
    Orders []PlaceOrdersWithReceiptResult_Orders 
}

type PlaceOrdersWithReceiptResponse struct {

    PlaceOrdersWithReceiptResult PlaceOrdersWithReceiptResult 
}

type CancelOrdersRequest struct {

}

type CancelOrders struct {

    cancelOrdersRequest CancelOrdersRequest 
}

type CancelOrdersResult_CancelledOrdersHandles struct {

    OrderHandle []int64 
}

type CancelOrdersResponseItem struct {

    OrderHandle int64 
    cancelledForSideStake string 
    PunterReferenceNumber int64 
}

type CancelOrdersResult_Orders struct {

    Order []CancelOrdersResponseItem 
}

type CancelOrdersResult struct {

    *BaseResponse  
    CancelledOrdersHandles []CancelOrdersResult_CancelledOrdersHandles 
    Orders []CancelOrdersResult_Orders 
}

type CancelOrdersResponse struct {

    CancelOrdersResult CancelOrdersResult 
}

type CancelAllOrdersRequest struct {

}

type CancelAllOrders struct {

    cancelAllOrdersRequest CancelAllOrdersRequest 
}

type CancelAllOrdersResult_CancelledOrdersHandles struct {

    OrderHandle []int64 
}

type CancelAllOrdersResponseItem struct {

    OrderHandle int64 
    cancelledForSideStake string 
    PunterReferenceNumber int64 
}

type CancelAllOrdersResult_Orders struct {

    Order []CancelAllOrdersResponseItem 
}

type CancelAllOrdersResult struct {

    *BaseResponse  
    CancelledOrdersHandles []CancelAllOrdersResult_CancelledOrdersHandles 
    Orders []CancelAllOrdersResult_Orders 
}

type CancelAllOrdersResponse struct {

    CancelAllOrdersResult CancelAllOrdersResult 
}

type CancelAllOrdersOnMarketRequest struct {

    MarketIds []int64 
}

type CancelAllOrdersOnMarket struct {

    cancelAllOrdersOnMarketRequest CancelAllOrdersOnMarketRequest 
}

type CancelAllOrdersOnMarketResponseItem struct {

    OrderHandle int64 
    cancelledForSideStake string 
    PunterReferenceNumber int64 
}

type CancelAllOrdersOnMarketResult struct {

    *BaseResponse  
    OrderIds []int64 
    Order []CancelAllOrdersOnMarketResponseItem 
}

type CancelAllOrdersOnMarketResponse struct {

    CancelAllOrdersOnMarketResult CancelAllOrdersOnMarketResult 
}

type GetAccountBalancesRequest struct {

}

type GetAccountBalances struct {

    getAccountBalancesRequest GetAccountBalancesRequest 
}

type GetAccountBalancesResult struct {

    *BaseResponse  
    Currency string 
    Balance string 
    Exposure string 
    AvailableFunds string 
    Credit string 
}

type GetAccountBalancesResponse struct {

    GetAccountBalancesResult GetAccountBalancesResult 
}

type ListAccountPostingsRequest struct {

    StartTime string 
    EndTime string 
}

type ListAccountPostings struct {

    listAccountPostingsRequest ListAccountPostingsRequest 
}

type ListAccountPostingsResponseItem struct {

    PostedAt string 
    Description string 
    Amount string 
    ResultingBalance string 
    PostingCategory int64 
    OrderId int64 
    MarketId int64 
    TransactionId int64 
}

type ListAccountPostingsResult_Orders struct {

    Order []ListAccountPostingsResponseItem 
}

type ListAccountPostingsResult struct {

    *BaseResponse  
    Currency string 
    AvailableFunds string 
    Balance string 
    Credit string 
    Exposure string 
    HaveAllPostingsBeenReturned bool 
    Orders []ListAccountPostingsResult_Orders 
}

type ListAccountPostingsResponse struct {

    ListAccountPostingsResult ListAccountPostingsResult 
}

type ListAccountPostingsByIdRequest struct {

    TransactionId int64 
}

type ListAccountPostingsById struct {

    listAccountPostingsByIdRequest ListAccountPostingsByIdRequest 
}

type ListAccountPostingsByIdResponseItem struct {

    PostedAt string 
    Description string 
    Amount string 
    ResultingBalance string 
    PostingCategory int64 
    OrderId int64 
    MarketId int64 
    TransactionId int64 
}

type ListAccountPostingsByIdResult_Orders struct {

    Order []ListAccountPostingsByIdResponseItem 
}

type ListAccountPostingsByIdResult struct {

    *BaseResponse  
    Currency string 
    AvailableFunds string 
    Balance string 
    Credit string 
    Exposure string 
    Orders []ListAccountPostingsByIdResult_Orders 
}

type ListAccountPostingsByIdResponse struct {

    ListAccountPostingsByIdResult ListAccountPostingsByIdResult 
}

type UpdateOrdersNoReceiptRequestItem struct {

    BetId int64 
    DeltaStake string 
    Price string 
    ExpectedSelectionResetCount int64 
    ExpectedWithdrawalSequenceNumber int64 
    CancelOnInRunning bool 
    CancelIfSelectionReset bool 
    SetToBeSPIfUnmatched bool 
}

type UpdateOrdersNoReceiptRequest_Orders struct {

    Order []UpdateOrdersNoReceiptRequestItem 
}

type UpdateOrdersNoReceiptRequest struct {

    Orders []UpdateOrdersNoReceiptRequest_Orders 
}

type UpdateOrdersNoReceipt struct {

    updateOrdersNoReceiptRequest UpdateOrdersNoReceiptRequest 
}

type UpdateOrdersNoReceiptResponseItem struct {

    BetId int64 
    ReturnCode int64 
}

type UpdateOrdersNoReceiptResult_Orders struct {

    Order []UpdateOrdersNoReceiptResponseItem 
}

type UpdateOrdersNoReceiptResult struct {

    *BaseResponse  
    Orders []UpdateOrdersNoReceiptResult_Orders 
}

type UpdateOrdersNoReceiptResponse struct {

    UpdateOrdersNoReceiptResult UpdateOrdersNoReceiptResult 
}

type GetOrderDetailsRequest struct {

    OrderId int64 
}

type GetOrderDetails struct {

    getOrderDetailsRequest GetOrderDetailsRequest 
}

type OrderSettlementInformationType struct {

    GrossSettlementAmount string 
    OrderCommission string 
    MarketCommission string 
    MarketSettledDate string 
}

type MatchedOrderInformationType struct {

    MatchedStake string 
    MatchedAgainstStake string 
    PriceMatched string 
    MatchedOrderID int64 
    WasMake bool 
}

type CommissionInformationType struct {

    GrossSettlementAmount string 
    OrderCommission string 
}

type AuditLogItem struct {

    Time string 
    // Placed(1), ExplicitlyUpdated(2), Matched(3), CancelledExplicitly(4), CancelledByReset(5), CancelledOnInRunning(6), Expired(7), MatchedPortionRepricedByR4(8), UnmatchedPortionRepricedByR4(9), UnmatchedPortionCancelledByWithdrawal(10), Voided(11), Settled(12), Suspended(13), Unsuspended(14)
    OrderActionType int64 
    RequestedStake string 
    TotalStake string 
    TotalAgainstStake string 
    RequestedPrice string 
    AveragePrice string 
    MatchedOrderInformation []MatchedOrderInformationType 
    CommissionInformation []CommissionInformationType 
}

type GetOrderDetailsResult_AuditLog struct {

    AuditLog []AuditLogItem 
}

type GetOrderDetailsResult struct {

    *BaseResponse  
    SelectionId int64 
    // Unmatched(1), Matched(2), Cancelled(3), Settled(4), Void(5), Suspended(6)
    OrderStatus int64 
    IssuedAt string 
    LastChangedAt string 
    ExpiresAt string 
    ValidFrom string 
    RestrictOrderToBroker bool 
    // Normal(1), FillAndKill(2), FillOrKill(3), FillOrKillDontCancel(4)
    OrderFillType int64 
    FillOrKillThreshold string 
    MarketId int64 
    // Inactive(1), Active(2), Suspended(3), Completed(4), Settled(6), Voided(7)
    MarketStatus int64 
    RequestedStake string 
    RequestedPrice string 
    ExpectedSelectionResetCount int64 
    TotalStake string 
    UnmatchedStake string 
    AveragePrice string 
    MatchingTimeStamp string 
    Polarity int64 
    // Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 
    CancelOnInRunning bool 
    CancelIfSelectionReset bool 
    SequenceNumber int64 
    PunterReferenceNumber int64 
    // Win (1), Place (2), MatchOdds (3), OverUnder (4), AsianHandicap (10), TwoBall (11), ThreeBall (12), Unspecified (13), MatchMarket (14), SetMarket (15), Moneyline (16), Total (17), Handicap (18), EachWayNonHandicap (19), EachWayHandicap (20), EachWayTournament (21), RunningBall (22),  MatchBetting (23), MatchBettingInclDraw (24), CorrectScore (25), HalfTimeFullTime (26), TotalGoals (27), GoalsScored (28), Corners (29), OddsOrEvens (30), HalfTimeResult (31), HalfTimeScore (32), MatchOddsExtraTime (33), CorrectScoreExtraTime (34), OverUnderExtraTime (35), ToQualify (36), DrawNoBet (37), HalftimeAsianHcp (39), HalftimeOverUnder (40), NextGoal (41), FirstGoalscorer (42), LastGoalscorer (43), PlayerToScore (44), FirstHalfHandicap (45), FirstHalfTotal (46), SetBetting (47), GroupBetting (48), MatchplaySingle (49), MatchplayFourball (50), MatchplayFoursome (51), TiedMatch (52), TopBatsman (53), InningsRuns (54), TotalTries (55), TotalPoints (56), FrameBetting (57), ToScoreFirst (58), ToScoreLast (59), FirstScoringPlay (60), LastScoringPlay (61), HighestScoringQtr (62), RunLine (63), RoundBetting (64), LineBetting (65)
    MarketType int64 
    ExpectedWithdrawalSequenceNumber int64 
    OrderSettlementInformation []OrderSettlementInformationType 
    AuditLog []GetOrderDetailsResult_AuditLog 
}

type GetOrderDetailsResponse struct {

    GetOrderDetailsResult GetOrderDetailsResult 
}

type ChangePasswordRequest struct {

    Password string 
}

type ChangePassword struct {

    changePasswordRequest ChangePasswordRequest 
}

type ChangePasswordResult struct {

    *BaseResponse  
}

type ChangePasswordResponse struct {

    ChangePasswordResult ChangePasswordResult 
}

type SuspendFromTradingRequest struct {

}

type SuspendFromTrading struct {

    suspendFromTradingRequest SuspendFromTradingRequest 
}

type SuspendFromTradingResult struct {

    *BaseResponse  
}

type SuspendFromTradingResponse struct {

    SuspendFromTradingResult SuspendFromTradingResult 
}

type UnsuspendFromTradingRequest struct {

}

type UnsuspendFromTrading struct {

    unsuspendFromTradingRequest UnsuspendFromTradingRequest 
}

type UnsuspendFromTradingResult struct {

    *BaseResponse  
}

type UnsuspendFromTradingResponse struct {

    UnsuspendFromTradingResult UnsuspendFromTradingResult 
}

type SuspendOrdersRequest struct {

    OrderIds []int64 
}

type SuspendOrders struct {

    suspendOrdersRequest SuspendOrdersRequest 
}

type SuspendOrdersResponseItem struct {

    OrderId int64 
    SuspendedForSideStake string 
    PunterReferenceNumber int64 
}

type SuspendOrdersResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendOrdersResponse struct {

    SuspendOrdersResult SuspendOrdersResult 
}

type SuspendAllOrdersOnMarketRequest struct {

    MarketId int64 
}

type SuspendAllOrdersOnMarket struct {

    suspendAllOrdersOnMarket SuspendAllOrdersOnMarketRequest 
}

type SuspendAllOrdersOnMarketResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendAllOrdersOnMarketResponse struct {

    SuspendAllOrdersOnMarketResult SuspendAllOrdersOnMarketResult 
}

type UnsuspendOrdersRequest struct {

    OrderIds []int64 
}

type UnsuspendOrders struct {

    unsuspendOrdersRequest UnsuspendOrdersRequest 
}

type UnsuspendOrdersResult struct {

    *BaseResponse  
}

type UnsuspendOrdersResponse struct {

    UnsuspendOrdersResult UnsuspendOrdersResult 
}

type SuspendAllOrdersRequest struct {

}

type SuspendAllOrders struct {

    suspendAllOrdersRequest SuspendAllOrdersRequest 
}

type SuspendAllOrdersResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendAllOrdersResponse struct {

    SuspendAllOrdersResult SuspendAllOrdersResult 
}

type ListBlacklistInformationRequest struct {

}

type ListBlacklistInformation struct {

    listBlacklistInformationRequest ListBlacklistInformationRequest 
}

type ApiTimes struct {

    ApiName string 
    RemainingMS int64 
}

type ListBlacklistInformationResult struct {

    *BaseResponse  
    ApiNamesAndTimes []ApiTimes 
}

type ListBlacklistInformationResponse struct {

    ListBlacklistInformationResult ListBlacklistInformationResult 
}

type RegisterHeartbeatRequest struct {

    ThresholdMs int64 
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 
}

type RegisterHeartbeat struct {

    registerHeartbeatRequest RegisterHeartbeatRequest 
}

type RegisterHeartbeatResult struct {

    *BaseResponse  
}

type RegisterHeartbeatResponse struct {

    RegisterHeartbeatResult RegisterHeartbeatResult 
}

type ChangeHeartbeatRegistrationRequest struct {

    ThresholdMs int64 
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 
}

type ChangeHeartbeatRegistration struct {

    changeHeartbeatRegistrationRequest ChangeHeartbeatRegistrationRequest 
}

type ChangeHeartbeatRegistrationResult struct {

    *BaseResponse  
}

type ChangeHeartbeatRegistrationResponse struct {

    ChangeHeartbeatRegistrationResult ChangeHeartbeatRegistrationResult 
}

type DeregisterHeartbeatRequest struct {

}

type DeregisterHeartbeat struct {

    deregisterHeartbeatRequest DeregisterHeartbeatRequest 
}

type DeregisterHeartbeatResult struct {

    *BaseResponse  
}

type DeregisterHeartbeatResponse struct {

    DeregisterHeartbeatResult DeregisterHeartbeatResult 
}

type PulseRequest struct {

}

type Pulse struct {

    pulseRequest PulseRequest 
}

type PulseResult struct {

    *BaseResponse  
    PerformedAt string 
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 
}

type PulseResponse struct {

    PulseResult PulseResult 
}

