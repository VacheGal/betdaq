// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-04-16 13:12:36.590863 +0100 BST m=+0.013667359
package api


type ListSelectionsChangedSinceRequest struct {

    SelectionSequenceNumber int64 `xml:"SelectionSequenceNumber,attr"`
}

type ListSelectionsChangedSince struct {

    listSelectionsChangedSinceRequest ListSelectionsChangedSinceRequest 
}

type ReturnStatus struct {

    Code int64 `xml:"Code,attr"`
    Description string `xml:"Description,attr"`
    CallId string `xml:"CallId,attr"`
    ExtraInformation string `xml:"ExtraInformation,attr"`
}

type BaseResponse struct {

    ReturnStatus []ReturnStatus 
    Timestamp []string 
}

type SettlementInformationType struct {

    SettledTime string `xml:"SettledTime,attr"`
    VoidPercentage string `xml:"VoidPercentage,attr"`
    LeftSideFactor string `xml:"LeftSideFactor,attr"`
    RightSideFactor string `xml:"RightSideFactor,attr"`
    SettlementResultString string `xml:"SettlementResultString,attr"`
}

type ListSelectionsChangedSinceResponseItem struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    DisplayOrder int64 `xml:"DisplayOrder,attr"`
    IsHidden bool `xml:"IsHidden,attr"`
    Status int64 `xml:"Status,attr"`
    ResetCount int64 `xml:"ResetCount,attr"`
    WithdrawalFactor string `xml:"WithdrawalFactor,attr"`
    MarketId int64 `xml:"MarketId,attr"`
    SelectionSequenceNumber int64 `xml:"SelectionSequenceNumber,attr"`
    CancelOrdersTime string `xml:"CancelOrdersTime,attr"`
    SettlementInformation []SettlementInformationType 
}

type ListSelectionsChangedSinceResult struct {

    *BaseResponse  
    Selections []ListSelectionsChangedSinceResponseItem 
}

type ListSelectionsChangedSinceResponse struct {

    ListSelectionsChangedSinceResult ListSelectionsChangedSinceResult 
}

type ListTopLevelEventsRequest struct {

    WantPlayMarkets bool `xml:"WantPlayMarkets,attr"`
}

type ListTopLevelEvents struct {

    listTopLevelEventsRequest ListTopLevelEventsRequest 
}

type SelectionType struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    Status int64 `xml:"Status,attr"`
    ResetCount int64 `xml:"ResetCount,attr"`
    DeductionFactor string `xml:"DeductionFactor,attr"`
    DisplayOrder int64 `xml:"DisplayOrder,attr"`
}

type MarketType struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    Type int64 `xml:"Type,attr"`
    IsPlayMarket bool `xml:"IsPlayMarket,attr"`
    // Inactive(1), Active(2), Suspended(3), Withdrawn(4), BallotedOut(9), Voided(5), Completed(6), Settled(8)
    Status int64 `xml:"Status,attr"`
    NumberOfWinningSelections int64 `xml:"NumberOfWinningSelections,attr"`
    StartTime string `xml:"StartTime,attr"`
    WithdrawalSequenceNumber int64 `xml:"WithdrawalSequenceNumber,attr"`
    DisplayOrder int64 `xml:"DisplayOrder,attr"`
    IsEnabledForMultiples bool `xml:"IsEnabledForMultiples,attr"`
    IsInRunningAllowed bool `xml:"IsInRunningAllowed,attr"`
    RaceGrade string `xml:"RaceGrade,attr"`
    IsManagedWhenInRunning bool `xml:"IsManagedWhenInRunning,attr"`
    IsCurrentlyInRunning bool `xml:"IsCurrentlyInRunning,attr"`
    InRunningDelaySeconds int64 `xml:"InRunningDelaySeconds,attr"`
    EventClassifierId int64 `xml:"EventClassifierId,attr"`
    PlacePayout string `xml:"PlacePayout,attr"`
    Selections []SelectionType 
}

type EventClassifierType struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    DisplayOrder int64 `xml:"DisplayOrder,attr"`
    IsEnabledForMultiples bool `xml:"IsEnabledForMultiples,attr"`
    ParentId int64 `xml:"ParentId,attr"`
    EventClassifiers []EventClassifierType 
    Markets []MarketType 
}

type ListTopLevelEventsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type ListTopLevelEventsResponse struct {

    ListTopLevelEventsResult ListTopLevelEventsResult 
}

type GetEventSubTreeWithSelectionsRequest struct {

    WantPlayMarkets bool `xml:"WantPlayMarkets,attr"`
    EventClassifierIds []int64 
}

type GetEventSubTreeWithSelections struct {

    getEventSubTreeWithSelectionsRequest GetEventSubTreeWithSelectionsRequest 
}

type GetEventSubTreeWithSelectionsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type GetEventSubTreeWithSelectionsResponse struct {

    GetEventSubTreeWithSelectionsResult GetEventSubTreeWithSelectionsResult 
}

type GetEventSubTreeNoSelectionsRequest struct {

    WantDirectDescendentsOnly bool `xml:"WantDirectDescendentsOnly,attr"`
    WantPlayMarkets bool `xml:"WantPlayMarkets,attr"`
    EventClassifierIds []int64 
}

type GetEventSubTreeNoSelections struct {

    getEventSubTreeNoSelectionsRequest GetEventSubTreeNoSelectionsRequest 
}

type GetEventSubTreeNoSelectionsResult struct {

    *BaseResponse  
    EventClassifiers []EventClassifierType 
}

type GetEventSubTreeNoSelectionsResponse struct {

    GetEventSubTreeNoSelectionsResult GetEventSubTreeNoSelectionsResult 
}

type GetMarketInformationRequest struct {

}

type GetMarketInformation struct {

    getMarketInformationRequest GetMarketInformationRequest 
}

type GetMarketInformationResult struct {

    *BaseResponse  
    Markets []MarketType 
}

type GetMarketInformationResponse struct {

    GetMarketInformationResult GetMarketInformationResult 
}

type ListMarketWithdrawalHistoryRequest struct {

    MarketId int64 `xml:"MarketId,attr"`
}

type ListMarketWithdrawalHistory struct {

    listMarketWithdrawalHistoryRequest ListMarketWithdrawalHistoryRequest 
}

type ListMarketWithdrawalHistoryResponseItem struct {

    SelectionId int64 `xml:"SelectionId,attr"`
    WithdrawalTime string `xml:"WithdrawalTime,attr"`
    SequenceNumber int64 `xml:"SequenceNumber,attr"`
    ReductionFactor string `xml:"ReductionFactor,attr"`
    CompoundReductionFactor string `xml:"CompoundReductionFactor,attr"`
}

type ListMarketWithdrawalHistoryResult struct {

    *BaseResponse  
    Withdrawals []ListMarketWithdrawalHistoryResponseItem 
}

type ListMarketWithdrawalHistoryResponse struct {

    ListMarketWithdrawalHistoryResult ListMarketWithdrawalHistoryResult 
}

type GetPricesRequest struct {

    ThresholdAmount string `xml:"ThresholdAmount,attr"`
    NumberForPricesRequired int64 `xml:"NumberForPricesRequired,attr"`
    NumberAgainstPricesRequired int64 `xml:"NumberAgainstPricesRequired,attr"`
    WantMarketMatchedAmount bool `xml:"WantMarketMatchedAmount,attr"`
    WantSelectionsMatchedAmounts bool `xml:"WantSelectionsMatchedAmounts,attr"`
    WantSelectionMatchedDetails bool `xml:"WantSelectionMatchedDetails,attr"`
    MarketIds []int64 
}

type GetPrices struct {

    getPricesRequest GetPricesRequest 
}

type PricesType struct {

    Price string `xml:"Price,attr"`
    Stake string `xml:"Stake,attr"`
}

type SelectionTypeWithPrices struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    Status int64 `xml:"Status,attr"`
    ResetCount int64 `xml:"ResetCount,attr"`
    DeductionFactor string `xml:"DeductionFactor,attr"`
    MatchedSelectionForStake string `xml:"MatchedSelectionForStake,attr"`
    SelectionOpenInterest string `xml:"SelectionOpenInterest,attr"`
    MarketWinnings string `xml:"MarketWinnings,attr"`
    MarketPositiveWinnings string `xml:"MarketPositiveWinnings,attr"`
    MatchedSelectionAgainstStake string `xml:"MatchedSelectionAgainstStake,attr"`
    LastMatchedOccurredAt string `xml:"LastMatchedOccurredAt,attr"`
    LastMatchedPrice string `xml:"LastMatchedPrice,attr"`
    LastMatchedForSideAmount string `xml:"LastMatchedForSideAmount,attr"`
    LastMatchedAgainstSideAmount string `xml:"LastMatchedAgainstSideAmount,attr"`
    MatchedForSideAmountAtSamePrice string `xml:"MatchedForSideAmountAtSamePrice,attr"`
    MatchedAgainstSideAmountAtSamePrice string `xml:"MatchedAgainstSideAmountAtSamePrice,attr"`
    FirstMatchAtSamePriceOccurredAt string `xml:"FirstMatchAtSamePriceOccurredAt,attr"`
    NumberOrders int64 `xml:"NumberOrders,attr"`
    NumberPunters int64 `xml:"NumberPunters,attr"`
    ForSidePrices []PricesType 
    AgainstSidePrices []PricesType 
}

type MarketTypeWithPrices struct {

    Id int64 `xml:"Id,attr"`
    Name string `xml:"Name,attr"`
    Type int64 `xml:"Type,attr"`
    IsPlayMarket bool `xml:"IsPlayMarket,attr"`
    Status int64 `xml:"Status,attr"`
    NumberOfWinningSelections int64 `xml:"NumberOfWinningSelections,attr"`
    StartTime string `xml:"StartTime,attr"`
    WithdrawalSequenceNumber int64 `xml:"WithdrawalSequenceNumber,attr"`
    DisplayOrder int64 `xml:"DisplayOrder,attr"`
    IsEnabledForMultiples bool `xml:"IsEnabledForMultiples,attr"`
    IsInRunningAllowed bool `xml:"IsInRunningAllowed,attr"`
    IsManagedWhenInRunning bool `xml:"IsManagedWhenInRunning,attr"`
    IsCurrentlyInRunning bool `xml:"IsCurrentlyInRunning,attr"`
    InRunningDelaySeconds int64 `xml:"InRunningDelaySeconds,attr"`
    ReturnCode int64 `xml:"ReturnCode,attr"`
    TotalMatchedAmount string `xml:"TotalMatchedAmount,attr"`
    PlacePayout string `xml:"PlacePayout,attr"`
    MatchedMarketForStake string `xml:"MatchedMarketForStake,attr"`
    MatchedMarketAgainstStake string `xml:"MatchedMarketAgainstStake,attr"`
    HomeTeamScore int64 `xml:"HomeTeamScore,attr"`
    AwayTeamScore int64 `xml:"AwayTeamScore,attr"`
    ScoreType int64 `xml:"ScoreType,attr"`
    Selections []SelectionTypeWithPrices 
}

type GetPricesResult struct {

    *BaseResponse  
    MarketPrices []MarketTypeWithPrices 
}

type GetPricesResponse struct {

    GetPricesResult GetPricesResult 
}

type GetOddsLadderRequest struct {

    PriceFormat int64 `xml:"PriceFormat,attr"`
}

type GetOddsLadder struct {

    getOddsLadderRequest GetOddsLadderRequest 
}

type GetOddsLadderResponseItem struct {

    Price string `xml:"price,attr"`
    Representation string `xml:"representation,attr"`
}

type GetOddsLadderResult struct {

    *BaseResponse  
    Ladder []GetOddsLadderResponseItem 
}

type GetOddsLadderResponse struct {

    GetOddsLadderResult GetOddsLadderResult 
}

type GetCurrentSelectionSequenceNumberRequest struct {

}

type GetCurrentSelectionSequenceNumber struct {

    getCurrentSelectionSequenceNumberRequest GetCurrentSelectionSequenceNumberRequest 
}

type GetCurrentSelectionSequenceNumberResult struct {

    *BaseResponse  
    SelectionSequenceNumber int64 `xml:"SelectionSequenceNumber,attr"`
}

type GetCurrentSelectionSequenceNumberResponse struct {

    GetCurrentSelectionSequenceNumberResult GetCurrentSelectionSequenceNumberResult 
}

type SelectionTradesRequestItem struct {

    SelectionId int64 `xml:"selectionId,attr"`
    FromTradeId int64 `xml:"fromTradeId,attr"`
}

type ListSelectionTradesRequest struct {

    Currency string `xml:"currency,attr"`
    selectionRequests []SelectionTradesRequestItem 
}

type ListSelectionTrades struct {

    listSelectionTradesRequest ListSelectionTradesRequest 
}

type TradeItemType struct {

    OccurredAt string `xml:"occurredAt,attr"`
    Price string `xml:"price,attr"`
    BackersStake string `xml:"backersStake,attr"`
    LayersLiability string `xml:"layersLiability,attr"`
    // Back(1), Lay(2)
    TradeType int64 `xml:"tradeType,attr"`
}

type ListSelectionTradesResponseItem struct {

    SelectionId int64 `xml:"selectionId,attr"`
    MaxTradeId int64 `xml:"maxTradeId,attr"`
    MaxTradeIdReturned int64 `xml:"maxTradeIdReturned,attr"`
    TradeItems []TradeItemType 
}

type ListSelectionTradesResult struct {

    *BaseResponse  
    SelectionTrades []ListSelectionTradesResponseItem 
}

type ListSelectionTradesResponse struct {

    ListSelectionTradesResult ListSelectionTradesResult 
}

type GetSPEnabledMarketsInformationRequest struct {

}

type GetSPEnabledMarketsInformation struct {

    GetSPEnabledMarketsInformationRequest GetSPEnabledMarketsInformationRequest 
}

type GetSPEnabledMarketsInformationResult_SPEnabledEvent_MarketTypeIds struct {

    MarketTypeId []int64 
}

type GetSPEnabledMarketsInformationResult_SPEnabledEvent struct {

    MarketTypeIds []GetSPEnabledMarketsInformationResult_SPEnabledEvent_MarketTypeIds 
}

type GetSPEnabledMarketsInformationResult struct {

    *BaseResponse  
    SPEnabledEvent []GetSPEnabledMarketsInformationResult_SPEnabledEvent 
}

type GetSPEnabledMarketsInformationResponse struct {

    GetSPEnabledMarketsInformationResult GetSPEnabledMarketsInformationResult 
}

type ListBootstrapOrdersRequest struct {

    SequenceNumber []int64 
    wantSettledOrdersOnUnsettledMarkets []bool 
}

type ListBootstrapOrders struct {

    listBootstrapOrdersRequest ListBootstrapOrdersRequest 
}

type OrderCommissionInformationType struct {

    GrossSettlementAmount string `xml:"GrossSettlementAmount,attr"`
    OrderCommission string `xml:"OrderCommission,attr"`
}

type Order struct {

    Id int64 `xml:"Id,attr"`
    MarketId int64 `xml:"MarketId,attr"`
    SelectionId int64 `xml:"SelectionId,attr"`
    SequenceNumber int64 `xml:"SequenceNumber,attr"`
    IssuedAt string `xml:"IssuedAt,attr"`
    Polarity int64 `xml:"Polarity,attr"`
    UnmatchedStake string `xml:"UnmatchedStake,attr"`
    RequestedPrice string `xml:"RequestedPrice,attr"`
    MatchedPrice string `xml:"MatchedPrice,attr"`
    MatchedStake string `xml:"MatchedStake,attr"`
    TotalForSideMakeStake string `xml:"TotalForSideMakeStake,attr"`
    TotalForSideTakeStake string `xml:"TotalForSideTakeStake,attr"`
    MatchedAgainstStake string `xml:"MatchedAgainstStake,attr"`
    Status int64 `xml:"Status,attr"`
    RestrictOrderToBroker bool `xml:"RestrictOrderToBroker,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
    CancelOnInRunning bool `xml:"CancelOnInRunning,attr"`
    CancelIfSelectionReset bool `xml:"CancelIfSelectionReset,attr"`
    IsCurrentlyInRunning bool `xml:"IsCurrentlyInRunning,attr"`
    PunterCommissionBasis int64 `xml:"PunterCommissionBasis,attr"`
    MakeCommissionRate string `xml:"MakeCommissionRate,attr"`
    TakeCommissionRate string `xml:"TakeCommissionRate,attr"`
    ExpectedSelectionResetCount int64 `xml:"ExpectedSelectionResetCount,attr"`
    ExpectedWithdrawalSequenceNumber int64 `xml:"ExpectedWithdrawalSequenceNumber,attr"`
    OrderFillType int64 `xml:"OrderFillType,attr"`
    FillOrKillThreshold string `xml:"FillOrKillThreshold,attr"`
    OrderCommissionInformation []OrderCommissionInformationType 
}

type ListBootstrapOrdersResult_Orders struct {

    Order []Order 
}

type ListBootstrapOrdersResult struct {

    *BaseResponse  
    MaximumSequenceNumber int64 `xml:"MaximumSequenceNumber,attr"`
    Orders []ListBootstrapOrdersResult_Orders 
}

type ListBootstrapOrdersResponse struct {

    ListBootstrapOrdersResult ListBootstrapOrdersResult 
}

type ListOrdersChangedSinceRequest struct {

    SequenceNumber []int64 
}

type ListOrdersChangedSince struct {

    listOrdersChangedSinceRequest ListOrdersChangedSinceRequest 
}

type ListOrdersChangedSinceResult_Orders struct {

    Order []Order 
}

type ListOrdersChangedSinceResult struct {

    *BaseResponse  
    Orders []ListOrdersChangedSinceResult_Orders 
}

type ListOrdersChangedSinceResponse struct {

    ListOrdersChangedSinceResult ListOrdersChangedSinceResult 
}

type SimpleOrderRequest struct {

    SelectionId int64 `xml:"SelectionId,attr"`
    Stake string `xml:"Stake,attr"`
    Price string `xml:"Price,attr"`
    Polarity int64 `xml:"Polarity,attr"`
    // This value must be set to the SelectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the ExpectedSelectionResetCount that you submit to the server is not the same as the SelectionResetCount that is on the server, then your bet will NOT be accepted, and you will get an error.
    ExpectedSelectionResetCount int64 `xml:"ExpectedSelectionResetCount,attr"`
    // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
    ExpectedWithdrawalSequenceNumber int64 `xml:"ExpectedWithdrawalSequenceNumber,attr"`
    // The effect of this option when set to true is to cancel any unmatched orders when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
    CancelOnInRunning bool `xml:"CancelOnInRunning,attr"`
    // The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
    CancelIfSelectionReset bool `xml:"CancelIfSelectionReset,attr"`
    // An expires at value set in the past will cause the bet to be cancelled - although  the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
    ExpiresAt string `xml:"ExpiresAt,attr"`
    // Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 `xml:"WithdrawalRepriceOption,attr"`
    KillType int64 `xml:"KillType,attr"`
    // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
    FillOrKillThreshold string `xml:"FillOrKillThreshold,attr"`
    // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
    RestrictOrderToBroker bool `xml:"RestrictOrderToBroker,attr"`
    // For internal use only
    ChannelTypeInfo string `xml:"ChannelTypeInfo,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type PlaceOrdersNoReceiptRequest_Orders struct {

    Order []SimpleOrderRequest 
}

type PlaceOrdersNoReceiptRequest struct {

    Orders []PlaceOrdersNoReceiptRequest_Orders 
    WantAllOrNothingBehaviour []bool 
}

type PlaceOrdersNoReceipt struct {

    placeOrdersNoReceiptRequest PlaceOrdersNoReceiptRequest 
}

type PlaceOrdersNoReceiptResult_OrderHandles struct {

    OrderHandle []int64 
}

type PlaceOrdersNoReceiptResponseItem struct {

    OrderHandle int64 `xml:"OrderHandle,attr"`
    ReturnCode int64 `xml:"ReturnCode,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type PlaceOrdersNoReceiptResult_Orders struct {

    Order []PlaceOrdersNoReceiptResponseItem 
}

type PlaceOrdersNoReceiptResult struct {

    *BaseResponse  
    OrderHandles []PlaceOrdersNoReceiptResult_OrderHandles 
    Orders []PlaceOrdersNoReceiptResult_Orders 
}

type PlaceOrdersNoReceiptResponse struct {

    PlaceOrdersNoReceiptResult PlaceOrdersNoReceiptResult 
}

type PlaceOrdersWithReceiptRequestItem struct {

    SelectionId int64 `xml:"SelectionId,attr"`
    Stake string `xml:"Stake,attr"`
    Price string `xml:"Price,attr"`
    Polarity int64 `xml:"Polarity,attr"`
    // This value must be set to the selectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedSelectionResetCount that you submit to the server is not the same as the selectionResetCount that is on the server, then your bet will NOT be accepted, and you will get a 300 error.
    ExpectedSelectionResetCount int64 `xml:"ExpectedSelectionResetCount,attr"`
    // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
    ExpectedWithdrawalSequenceNumber int64 `xml:"ExpectedWithdrawalSequenceNumber,attr"`
    // FillAndKill=2, FillOrKill=3, FillOrKillDontCancel=4, SPIfUnmatched=5
    KillType int64 `xml:"KillType,attr"`
    // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
    FillOrKillThreshold string `xml:"FillOrKillThreshold,attr"`
    
    /*
     
              The effect of this option when set to true is to cancel any unmatched bets when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
              This field is required only if killType is set to FillOrKillDontCancel.
            
     */
    CancelOnInRunning bool `xml:"CancelOnInRunning,attr"`
    
    /*
     
              The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
              This field is required only if killType is set to FillOrKillDontCancel.
            
     */
    CancelIfSelectionReset bool `xml:"CancelIfSelectionReset,attr"`
    // This field is required only if killType is set to FillOrKillDontCancel. Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 `xml:"WithdrawalRepriceOption,attr"`
    
    /*
     
              An expires at value set in the past will cause the bet to be cancelled - although the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
              This field is optional if killType is set to FillOrKillDontCancel, otherwise not needed at all.
            
     */
    ExpiresAt string `xml:"ExpiresAt,attr"`
    // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
    RestrictOrderToBroker bool `xml:"RestrictOrderToBroker,attr"`
    // For internal use only
    ChannelTypeInfo string `xml:"ChannelTypeInfo,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type PlaceOrdersWithReceiptRequest_Orders struct {

    Order []PlaceOrdersWithReceiptRequestItem 
}

type PlaceOrdersWithReceiptRequest struct {

    Orders []PlaceOrdersWithReceiptRequest_Orders 
}

type PlaceOrdersWithReceipt struct {

    orders PlaceOrdersWithReceiptRequest 
}

type PlaceOrdersWithReceiptResponseItem struct {

    Status int64 `xml:"Status,attr"`
    MatchedAgainstStake string `xml:"MatchedAgainstStake,attr"`
    MatchedStake string `xml:"MatchedStake,attr"`
    MatchedPrice string `xml:"MatchedPrice,attr"`
    UnmatchedStake string `xml:"UnmatchedStake,attr"`
    Polarity int64 `xml:"Polarity,attr"`
    IssuedAt string `xml:"IssuedAt,attr"`
    SequenceNumber int64 `xml:"SequenceNumber,attr"`
    // Deprecated attribute.
    SelectionId int64 `xml:"SelectionId,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
    OrderHandle int64 `xml:"OrderHandle,attr"`
}

type PlaceOrdersWithReceiptResult_Orders struct {

    Order []PlaceOrdersWithReceiptResponseItem 
}

type PlaceOrdersWithReceiptResult struct {

    *BaseResponse  
    Orders []PlaceOrdersWithReceiptResult_Orders 
}

type PlaceOrdersWithReceiptResponse struct {

    PlaceOrdersWithReceiptResult PlaceOrdersWithReceiptResult 
}

type CancelOrdersRequest struct {

}

type CancelOrders struct {

    cancelOrdersRequest CancelOrdersRequest 
}

type CancelOrdersResult_CancelledOrdersHandles struct {

    OrderHandle []int64 
}

type CancelOrdersResponseItem struct {

    OrderHandle int64 `xml:"OrderHandle,attr"`
    CancelledForSideStake string `xml:"cancelledForSideStake,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type CancelOrdersResult_Orders struct {

    Order []CancelOrdersResponseItem 
}

type CancelOrdersResult struct {

    *BaseResponse  
    CancelledOrdersHandles []CancelOrdersResult_CancelledOrdersHandles 
    Orders []CancelOrdersResult_Orders 
}

type CancelOrdersResponse struct {

    CancelOrdersResult CancelOrdersResult 
}

type CancelAllOrdersRequest struct {

}

type CancelAllOrders struct {

    cancelAllOrdersRequest CancelAllOrdersRequest 
}

type CancelAllOrdersResult_CancelledOrdersHandles struct {

    OrderHandle []int64 
}

type CancelAllOrdersResponseItem struct {

    OrderHandle int64 `xml:"OrderHandle,attr"`
    CancelledForSideStake string `xml:"cancelledForSideStake,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type CancelAllOrdersResult_Orders struct {

    Order []CancelAllOrdersResponseItem 
}

type CancelAllOrdersResult struct {

    *BaseResponse  
    CancelledOrdersHandles []CancelAllOrdersResult_CancelledOrdersHandles 
    Orders []CancelAllOrdersResult_Orders 
}

type CancelAllOrdersResponse struct {

    CancelAllOrdersResult CancelAllOrdersResult 
}

type CancelAllOrdersOnMarketRequest struct {

    MarketIds []int64 
}

type CancelAllOrdersOnMarket struct {

    cancelAllOrdersOnMarketRequest CancelAllOrdersOnMarketRequest 
}

type CancelAllOrdersOnMarketResponseItem struct {

    OrderHandle int64 `xml:"OrderHandle,attr"`
    CancelledForSideStake string `xml:"cancelledForSideStake,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type CancelAllOrdersOnMarketResult struct {

    *BaseResponse  
    OrderIds []int64 
    Order []CancelAllOrdersOnMarketResponseItem 
}

type CancelAllOrdersOnMarketResponse struct {

    CancelAllOrdersOnMarketResult CancelAllOrdersOnMarketResult 
}

type GetAccountBalancesRequest struct {

}

type GetAccountBalances struct {

    getAccountBalancesRequest GetAccountBalancesRequest 
}

type GetAccountBalancesResult struct {

    *BaseResponse  
    Currency string `xml:"Currency,attr"`
    Balance string `xml:"Balance,attr"`
    Exposure string `xml:"Exposure,attr"`
    AvailableFunds string `xml:"AvailableFunds,attr"`
    Credit string `xml:"Credit,attr"`
}

type GetAccountBalancesResponse struct {

    GetAccountBalancesResult GetAccountBalancesResult 
}

type ListAccountPostingsRequest struct {

    StartTime string `xml:"StartTime,attr"`
    EndTime string `xml:"EndTime,attr"`
}

type ListAccountPostings struct {

    listAccountPostingsRequest ListAccountPostingsRequest 
}

type ListAccountPostingsResponseItem struct {

    PostedAt string `xml:"PostedAt,attr"`
    Description string `xml:"Description,attr"`
    Amount string `xml:"Amount,attr"`
    ResultingBalance string `xml:"ResultingBalance,attr"`
    PostingCategory int64 `xml:"PostingCategory,attr"`
    OrderId int64 `xml:"OrderId,attr"`
    MarketId int64 `xml:"MarketId,attr"`
    TransactionId int64 `xml:"TransactionId,attr"`
}

type ListAccountPostingsResult_Orders struct {

    Order []ListAccountPostingsResponseItem 
}

type ListAccountPostingsResult struct {

    *BaseResponse  
    Currency string `xml:"Currency,attr"`
    AvailableFunds string `xml:"AvailableFunds,attr"`
    Balance string `xml:"Balance,attr"`
    Credit string `xml:"Credit,attr"`
    Exposure string `xml:"Exposure,attr"`
    HaveAllPostingsBeenReturned bool `xml:"HaveAllPostingsBeenReturned,attr"`
    Orders []ListAccountPostingsResult_Orders 
}

type ListAccountPostingsResponse struct {

    ListAccountPostingsResult ListAccountPostingsResult 
}

type ListAccountPostingsByIdRequest struct {

    TransactionId int64 `xml:"TransactionId,attr"`
}

type ListAccountPostingsById struct {

    listAccountPostingsByIdRequest ListAccountPostingsByIdRequest 
}

type ListAccountPostingsByIdResponseItem struct {

    PostedAt string `xml:"PostedAt,attr"`
    Description string `xml:"Description,attr"`
    Amount string `xml:"Amount,attr"`
    ResultingBalance string `xml:"ResultingBalance,attr"`
    PostingCategory int64 `xml:"PostingCategory,attr"`
    OrderId int64 `xml:"OrderId,attr"`
    MarketId int64 `xml:"MarketId,attr"`
    TransactionId int64 `xml:"TransactionId,attr"`
}

type ListAccountPostingsByIdResult_Orders struct {

    Order []ListAccountPostingsByIdResponseItem 
}

type ListAccountPostingsByIdResult struct {

    *BaseResponse  
    Currency string `xml:"Currency,attr"`
    AvailableFunds string `xml:"AvailableFunds,attr"`
    Balance string `xml:"Balance,attr"`
    Credit string `xml:"Credit,attr"`
    Exposure string `xml:"Exposure,attr"`
    Orders []ListAccountPostingsByIdResult_Orders 
}

type ListAccountPostingsByIdResponse struct {

    ListAccountPostingsByIdResult ListAccountPostingsByIdResult 
}

type UpdateOrdersNoReceiptRequestItem struct {

    BetId int64 `xml:"BetId,attr"`
    DeltaStake string `xml:"DeltaStake,attr"`
    Price string `xml:"Price,attr"`
    ExpectedSelectionResetCount int64 `xml:"ExpectedSelectionResetCount,attr"`
    ExpectedWithdrawalSequenceNumber int64 `xml:"ExpectedWithdrawalSequenceNumber,attr"`
    CancelOnInRunning bool `xml:"CancelOnInRunning,attr"`
    CancelIfSelectionReset bool `xml:"CancelIfSelectionReset,attr"`
    SetToBeSPIfUnmatched bool `xml:"SetToBeSPIfUnmatched,attr"`
}

type UpdateOrdersNoReceiptRequest_Orders struct {

    Order []UpdateOrdersNoReceiptRequestItem 
}

type UpdateOrdersNoReceiptRequest struct {

    Orders []UpdateOrdersNoReceiptRequest_Orders 
}

type UpdateOrdersNoReceipt struct {

    updateOrdersNoReceiptRequest UpdateOrdersNoReceiptRequest 
}

type UpdateOrdersNoReceiptResponseItem struct {

    BetId int64 `xml:"BetId,attr"`
    ReturnCode int64 `xml:"ReturnCode,attr"`
}

type UpdateOrdersNoReceiptResult_Orders struct {

    Order []UpdateOrdersNoReceiptResponseItem 
}

type UpdateOrdersNoReceiptResult struct {

    *BaseResponse  
    Orders []UpdateOrdersNoReceiptResult_Orders 
}

type UpdateOrdersNoReceiptResponse struct {

    UpdateOrdersNoReceiptResult UpdateOrdersNoReceiptResult 
}

type GetOrderDetailsRequest struct {

    OrderId int64 `xml:"OrderId,attr"`
}

type GetOrderDetails struct {

    getOrderDetailsRequest GetOrderDetailsRequest 
}

type OrderSettlementInformationType struct {

    GrossSettlementAmount string `xml:"GrossSettlementAmount,attr"`
    OrderCommission string `xml:"OrderCommission,attr"`
    MarketCommission string `xml:"MarketCommission,attr"`
    MarketSettledDate string `xml:"MarketSettledDate,attr"`
}

type MatchedOrderInformationType struct {

    MatchedStake string `xml:"MatchedStake,attr"`
    MatchedAgainstStake string `xml:"MatchedAgainstStake,attr"`
    PriceMatched string `xml:"PriceMatched,attr"`
    MatchedOrderID int64 `xml:"MatchedOrderID,attr"`
    WasMake bool `xml:"WasMake,attr"`
}

type CommissionInformationType struct {

    GrossSettlementAmount string `xml:"GrossSettlementAmount,attr"`
    OrderCommission string `xml:"OrderCommission,attr"`
}

type AuditLogItem struct {

    Time string `xml:"Time,attr"`
    // Placed(1), ExplicitlyUpdated(2), Matched(3), CancelledExplicitly(4), CancelledByReset(5), CancelledOnInRunning(6), Expired(7), MatchedPortionRepricedByR4(8), UnmatchedPortionRepricedByR4(9), UnmatchedPortionCancelledByWithdrawal(10), Voided(11), Settled(12), Suspended(13), Unsuspended(14)
    OrderActionType int64 `xml:"OrderActionType,attr"`
    RequestedStake string `xml:"RequestedStake,attr"`
    TotalStake string `xml:"TotalStake,attr"`
    TotalAgainstStake string `xml:"TotalAgainstStake,attr"`
    RequestedPrice string `xml:"RequestedPrice,attr"`
    AveragePrice string `xml:"AveragePrice,attr"`
    MatchedOrderInformation []MatchedOrderInformationType 
    CommissionInformation []CommissionInformationType 
}

type GetOrderDetailsResult_AuditLog struct {

    AuditLog []AuditLogItem 
}

type GetOrderDetailsResult struct {

    *BaseResponse  
    SelectionId int64 `xml:"SelectionId,attr"`
    // Unmatched(1), Matched(2), Cancelled(3), Settled(4), Void(5), Suspended(6)
    OrderStatus int64 `xml:"OrderStatus,attr"`
    IssuedAt string `xml:"IssuedAt,attr"`
    LastChangedAt string `xml:"LastChangedAt,attr"`
    ExpiresAt string `xml:"ExpiresAt,attr"`
    ValidFrom string `xml:"ValidFrom,attr"`
    RestrictOrderToBroker bool `xml:"RestrictOrderToBroker,attr"`
    // Normal(1), FillAndKill(2), FillOrKill(3), FillOrKillDontCancel(4)
    OrderFillType int64 `xml:"OrderFillType,attr"`
    FillOrKillThreshold string `xml:"FillOrKillThreshold,attr"`
    MarketId int64 `xml:"MarketId,attr"`
    // Inactive(1), Active(2), Suspended(3), Completed(4), Settled(6), Voided(7)
    MarketStatus int64 `xml:"MarketStatus,attr"`
    RequestedStake string `xml:"RequestedStake,attr"`
    RequestedPrice string `xml:"RequestedPrice,attr"`
    ExpectedSelectionResetCount int64 `xml:"ExpectedSelectionResetCount,attr"`
    TotalStake string `xml:"TotalStake,attr"`
    UnmatchedStake string `xml:"UnmatchedStake,attr"`
    AveragePrice string `xml:"AveragePrice,attr"`
    MatchingTimeStamp string `xml:"MatchingTimeStamp,attr"`
    Polarity int64 `xml:"Polarity,attr"`
    // Reprice(1), Cancel(2), DontReprice(3)
    WithdrawalRepriceOption int64 `xml:"WithdrawalRepriceOption,attr"`
    CancelOnInRunning bool `xml:"CancelOnInRunning,attr"`
    CancelIfSelectionReset bool `xml:"CancelIfSelectionReset,attr"`
    SequenceNumber int64 `xml:"SequenceNumber,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
    // Win (1), Place (2), MatchOdds (3), OverUnder (4), AsianHandicap (10), TwoBall (11), ThreeBall (12), Unspecified (13), MatchMarket (14), SetMarket (15), Moneyline (16), Total (17), Handicap (18), EachWayNonHandicap (19), EachWayHandicap (20), EachWayTournament (21), RunningBall (22),  MatchBetting (23), MatchBettingInclDraw (24), CorrectScore (25), HalfTimeFullTime (26), TotalGoals (27), GoalsScored (28), Corners (29), OddsOrEvens (30), HalfTimeResult (31), HalfTimeScore (32), MatchOddsExtraTime (33), CorrectScoreExtraTime (34), OverUnderExtraTime (35), ToQualify (36), DrawNoBet (37), HalftimeAsianHcp (39), HalftimeOverUnder (40), NextGoal (41), FirstGoalscorer (42), LastGoalscorer (43), PlayerToScore (44), FirstHalfHandicap (45), FirstHalfTotal (46), SetBetting (47), GroupBetting (48), MatchplaySingle (49), MatchplayFourball (50), MatchplayFoursome (51), TiedMatch (52), TopBatsman (53), InningsRuns (54), TotalTries (55), TotalPoints (56), FrameBetting (57), ToScoreFirst (58), ToScoreLast (59), FirstScoringPlay (60), LastScoringPlay (61), HighestScoringQtr (62), RunLine (63), RoundBetting (64), LineBetting (65)
    MarketType int64 `xml:"MarketType,attr"`
    ExpectedWithdrawalSequenceNumber int64 `xml:"ExpectedWithdrawalSequenceNumber,attr"`
    OrderSettlementInformation []OrderSettlementInformationType 
    AuditLog []GetOrderDetailsResult_AuditLog 
}

type GetOrderDetailsResponse struct {

    GetOrderDetailsResult GetOrderDetailsResult 
}

type ChangePasswordRequest struct {

    Password string `xml:"Password,attr"`
}

type ChangePassword struct {

    changePasswordRequest ChangePasswordRequest 
}

type ChangePasswordResult struct {

    *BaseResponse  
}

type ChangePasswordResponse struct {

    ChangePasswordResult ChangePasswordResult 
}

type SuspendFromTradingRequest struct {

}

type SuspendFromTrading struct {

    suspendFromTradingRequest SuspendFromTradingRequest 
}

type SuspendFromTradingResult struct {

    *BaseResponse  
}

type SuspendFromTradingResponse struct {

    SuspendFromTradingResult SuspendFromTradingResult 
}

type UnsuspendFromTradingRequest struct {

}

type UnsuspendFromTrading struct {

    unsuspendFromTradingRequest UnsuspendFromTradingRequest 
}

type UnsuspendFromTradingResult struct {

    *BaseResponse  
}

type UnsuspendFromTradingResponse struct {

    UnsuspendFromTradingResult UnsuspendFromTradingResult 
}

type SuspendOrdersRequest struct {

    OrderIds []int64 
}

type SuspendOrders struct {

    suspendOrdersRequest SuspendOrdersRequest 
}

type SuspendOrdersResponseItem struct {

    OrderId int64 `xml:"OrderId,attr"`
    SuspendedForSideStake string `xml:"SuspendedForSideStake,attr"`
    PunterReferenceNumber int64 `xml:"PunterReferenceNumber,attr"`
}

type SuspendOrdersResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendOrdersResponse struct {

    SuspendOrdersResult SuspendOrdersResult 
}

type SuspendAllOrdersOnMarketRequest struct {

    MarketId int64 `xml:"MarketId,attr"`
}

type SuspendAllOrdersOnMarket struct {

    suspendAllOrdersOnMarket SuspendAllOrdersOnMarketRequest 
}

type SuspendAllOrdersOnMarketResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendAllOrdersOnMarketResponse struct {

    SuspendAllOrdersOnMarketResult SuspendAllOrdersOnMarketResult 
}

type UnsuspendOrdersRequest struct {

    OrderIds []int64 
}

type UnsuspendOrders struct {

    unsuspendOrdersRequest UnsuspendOrdersRequest 
}

type UnsuspendOrdersResult struct {

    *BaseResponse  
}

type UnsuspendOrdersResponse struct {

    UnsuspendOrdersResult UnsuspendOrdersResult 
}

type SuspendAllOrdersRequest struct {

}

type SuspendAllOrders struct {

    suspendAllOrdersRequest SuspendAllOrdersRequest 
}

type SuspendAllOrdersResult struct {

    *BaseResponse  
    Orders []SuspendOrdersResponseItem 
}

type SuspendAllOrdersResponse struct {

    SuspendAllOrdersResult SuspendAllOrdersResult 
}

type ListBlacklistInformationRequest struct {

}

type ListBlacklistInformation struct {

    listBlacklistInformationRequest ListBlacklistInformationRequest 
}

type ApiTimes struct {

    ApiName string `xml:"ApiName,attr"`
    RemainingMS int64 `xml:"RemainingMS,attr"`
}

type ListBlacklistInformationResult struct {

    *BaseResponse  
    ApiNamesAndTimes []ApiTimes 
}

type ListBlacklistInformationResponse struct {

    ListBlacklistInformationResult ListBlacklistInformationResult 
}

type RegisterHeartbeatRequest struct {

    ThresholdMs int64 `xml:"ThresholdMs,attr"`
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 `xml:"HeartbeatAction,attr"`
}

type RegisterHeartbeat struct {

    registerHeartbeatRequest RegisterHeartbeatRequest 
}

type RegisterHeartbeatResult struct {

    *BaseResponse  
}

type RegisterHeartbeatResponse struct {

    RegisterHeartbeatResult RegisterHeartbeatResult 
}

type ChangeHeartbeatRegistrationRequest struct {

    ThresholdMs int64 `xml:"ThresholdMs,attr"`
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 `xml:"HeartbeatAction,attr"`
}

type ChangeHeartbeatRegistration struct {

    changeHeartbeatRegistrationRequest ChangeHeartbeatRegistrationRequest 
}

type ChangeHeartbeatRegistrationResult struct {

    *BaseResponse  
}

type ChangeHeartbeatRegistrationResponse struct {

    ChangeHeartbeatRegistrationResult ChangeHeartbeatRegistrationResult 
}

type DeregisterHeartbeatRequest struct {

}

type DeregisterHeartbeat struct {

    deregisterHeartbeatRequest DeregisterHeartbeatRequest 
}

type DeregisterHeartbeatResult struct {

    *BaseResponse  
}

type DeregisterHeartbeatResponse struct {

    DeregisterHeartbeatResult DeregisterHeartbeatResult 
}

type PulseRequest struct {

}

type Pulse struct {

    pulseRequest PulseRequest 
}

type PulseResult struct {

    *BaseResponse  
    PerformedAt string `xml:"PerformedAt,attr"`
    // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
    HeartbeatAction int64 `xml:"HeartbeatAction,attr"`
}

type PulseResponse struct {

    PulseResult PulseResult 
}

