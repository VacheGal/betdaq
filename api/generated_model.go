// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-04-16 08:58:09.829226 +0100 BST m=+0.013861990
package api








var ReadOnlyService = "http://api.betdaq.com/v2.0/ReadOnlyService.asmx"

var SecureService = "https://api.betdaq.com/v2.0/Secure/SecureService.asmx"



type ApiTimes struct {
    
    
        // 
        ApiName string `xml:",attr"`
        // 
        RemainingMS int64 `xml:",attr"`
    
}

type ArrayOfInt struct {
    
        int int64  // sequence element
    
    
}

type ArrayOfOrder struct {
    
        Order Order  // sequence element
    
    
}

type AuditLogItem struct {
    
        MatchedOrderInformation MatchedOrderInformationType  // sequence element
        CommissionInformation CommissionInformationType  // sequence element
    
        // 
        Time string `xml:",attr"`
        // Placed(1), ExplicitlyUpdated(2), Matched(3), CancelledExplicitly(4), CancelledByReset(5), CancelledOnInRunning(6), Expired(7), MatchedPortionRepricedByR4(8), UnmatchedPortionRepricedByR4(9), UnmatchedPortionCancelledByWithdrawal(10), Voided(11), Settled(12), Suspended(13), Unsuspended(14)
        OrderActionType int64 `xml:",attr"`
        // 
        RequestedStake int64 `xml:",attr"`
        // 
        TotalStake int64 `xml:",attr"`
        // 
        TotalAgainstStake int64 `xml:",attr"`
        // 
        RequestedPrice int64 `xml:",attr"`
        // 
        AveragePrice int64 `xml:",attr"`
    
}

type BaseResponse struct {
    
        ReturnStatus ReturnStatus  // sequence element
        Timestamp string  // sequence element
    
    
}

type CancelAllOrdersOnMarketRequest struct {
    
        MarketIds int64  // sequence element
    
    
}

type CancelAllOrdersOnMarketResponse struct {
        *BaseResponse
    
    
        
    
        
            CancelAllOrdersOnMarketResult CancelAllOrdersOnMarketResponse
        
    
}

type CancelAllOrdersOnMarketResponseItem struct {
    
    
        // 
        OrderHandle int64 `xml:",attr"`
        // 
        cancelledForSideStake int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type CancelAllOrdersRequest struct {
    
    
    
}

type CancelAllOrdersResponse struct {
        *BaseResponse
    
    
        
    
        
            CancelAllOrdersResult CancelAllOrdersResponse
        
    
}

type CancelAllOrdersResponseItem struct {
    
    
        // 
        OrderHandle int64 `xml:",attr"`
        // 
        cancelledForSideStake int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type CancelOrdersRequest struct {
    
    
    
}

type CancelOrdersResponse struct {
        *BaseResponse
    
    
        
    
        
            CancelOrdersResult CancelOrdersResponse
        
    
}

type CancelOrdersResponseItem struct {
    
    
        // 
        OrderHandle int64 `xml:",attr"`
        // 
        cancelledForSideStake int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type ChangeHeartbeatRegistrationRequest struct {
    
    
        // 
        ThresholdMs int64 `xml:",attr"`
        // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
        HeartbeatAction int64 `xml:",attr"`
    
}

type ChangeHeartbeatRegistrationResponse struct {
        *BaseResponse
    
    
        
    
        
            ChangeHeartbeatRegistrationResult ChangeHeartbeatRegistrationResponse
        
    
}

type ChangePasswordRequest struct {
    
    
        // 
        Password string `xml:",attr"`
    
}

type ChangePasswordResponse struct {
        *BaseResponse
    
    
        
    
        
            ChangePasswordResult ChangePasswordResponse
        
    
}

type CommissionInformationType struct {
    
    
        // 
        GrossSettlementAmount int64 `xml:",attr"`
        // 
        OrderCommission int64 `xml:",attr"`
    
}

type DeregisterHeartbeatRequest struct {
    
    
    
}

type DeregisterHeartbeatResponse struct {
        *BaseResponse
    
    
        
    
        
            DeregisterHeartbeatResult DeregisterHeartbeatResponse
        
    
}

type EventClassifierType struct {
    
        EventClassifiers EventClassifierType  // sequence element
        Markets MarketType  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        DisplayOrder int64 `xml:",attr"`
        // 
        IsEnabledForMultiples bool `xml:",attr"`
        // 
        ParentId int64 `xml:",attr"`
    
}

type ExternalApiHeader struct {
    
    
        // 
        version int64 `xml:",attr"`
        // 
        languageCode string `xml:",attr"`
        // 
        username string `xml:",attr"`
        // 
        password string `xml:",attr"`
        // 
        applicationIdentifier string `xml:",attr"`
    
        
    
}

type GetAccountBalancesRequest struct {
    
    
    
}

type GetAccountBalancesResponse struct {
        *BaseResponse
    
    
        
            // 
            Currency string `xml:",attr"`
            // 
            Balance int64 `xml:",attr"`
            // 
            Exposure int64 `xml:",attr"`
            // 
            AvailableFunds int64 `xml:",attr"`
            // 
            Credit int64 `xml:",attr"`
    
        
            GetAccountBalancesResult GetAccountBalancesResponse
        
    
}

type GetCurrentSelectionSequenceNumberRequest struct {
    
    
    
}

type GetCurrentSelectionSequenceNumberResponse struct {
        *BaseResponse
    
    
        
            // 
            SelectionSequenceNumber int64 `xml:",attr"`
    
        
            GetCurrentSelectionSequenceNumberResult GetCurrentSelectionSequenceNumberResponse
        
    
}

type GetEventSubTreeNoSelectionsRequest struct {
    
        EventClassifierIds int64  // sequence element
    
        // 
        WantDirectDescendentsOnly bool `xml:",attr"`
        // 
        WantPlayMarkets bool `xml:",attr"`
    
}

type GetEventSubTreeNoSelectionsResponse struct {
        *BaseResponse
    
    
        
    
        
            GetEventSubTreeNoSelectionsResult GetEventSubTreeNoSelectionsResponse
        
    
}

type GetEventSubTreeWithSelectionsRequest struct {
    
        EventClassifierIds int64  // sequence element
    
        // 
        WantPlayMarkets bool `xml:",attr"`
    
}

type GetEventSubTreeWithSelectionsResponse struct {
        *BaseResponse
    
    
        
    
        
            GetEventSubTreeWithSelectionsResult GetEventSubTreeWithSelectionsResponse
        
    
}

type GetMarketInformationRequest struct {
    
    
    
}

type GetMarketInformationResponse struct {
        *BaseResponse
    
    
        
    
        
            GetMarketInformationResult GetMarketInformationResponse
        
    
}

type GetOddsLadderRequest struct {
    
    
        // 
        PriceFormat int64 `xml:",attr"`
    
}

type GetOddsLadderResponse struct {
        *BaseResponse
    
    
        
    
        
            GetOddsLadderResult GetOddsLadderResponse
        
    
}

type GetOddsLadderResponseItem struct {
    
    
        // 
        price int64 `xml:",attr"`
        // 
        representation string `xml:",attr"`
    
}

type GetOrderDetailsRequest struct {
    
    
        // 
        OrderId int64 `xml:",attr"`
    
}

type GetOrderDetailsResponse struct {
        *BaseResponse
    
    
        
            // 
            SelectionId int64 `xml:",attr"`
            // Unmatched(1), Matched(2), Cancelled(3), Settled(4), Void(5), Suspended(6)
            OrderStatus int64 `xml:",attr"`
            // 
            IssuedAt string `xml:",attr"`
            // 
            LastChangedAt string `xml:",attr"`
            // 
            ExpiresAt string `xml:",attr"`
            // 
            ValidFrom string `xml:",attr"`
            // 
            RestrictOrderToBroker bool `xml:",attr"`
            // Normal(1), FillAndKill(2), FillOrKill(3), FillOrKillDontCancel(4)
            OrderFillType int64 `xml:",attr"`
            // 
            FillOrKillThreshold int64 `xml:",attr"`
            // 
            MarketId int64 `xml:",attr"`
            // Inactive(1), Active(2), Suspended(3), Completed(4), Settled(6), Voided(7)
            MarketStatus int64 `xml:",attr"`
            // 
            RequestedStake int64 `xml:",attr"`
            // 
            RequestedPrice int64 `xml:",attr"`
            // 
            ExpectedSelectionResetCount int64 `xml:",attr"`
            // 
            TotalStake int64 `xml:",attr"`
            // 
            UnmatchedStake int64 `xml:",attr"`
            // 
            AveragePrice int64 `xml:",attr"`
            // 
            MatchingTimeStamp string `xml:",attr"`
            // 
            Polarity int64 `xml:",attr"`
            // Reprice(1), Cancel(2), DontReprice(3)
            WithdrawalRepriceOption int64 `xml:",attr"`
            // 
            CancelOnInRunning bool `xml:",attr"`
            // 
            CancelIfSelectionReset bool `xml:",attr"`
            // 
            SequenceNumber int64 `xml:",attr"`
            // 
            PunterReferenceNumber int64 `xml:",attr"`
            // Win (1), Place (2), MatchOdds (3), OverUnder (4), AsianHandicap (10), TwoBall (11), ThreeBall (12), Unspecified (13), MatchMarket (14), SetMarket (15), Moneyline (16), Total (17), Handicap (18), EachWayNonHandicap (19), EachWayHandicap (20), EachWayTournament (21), RunningBall (22),  MatchBetting (23), MatchBettingInclDraw (24), CorrectScore (25), HalfTimeFullTime (26), TotalGoals (27), GoalsScored (28), Corners (29), OddsOrEvens (30), HalfTimeResult (31), HalfTimeScore (32), MatchOddsExtraTime (33), CorrectScoreExtraTime (34), OverUnderExtraTime (35), ToQualify (36), DrawNoBet (37), HalftimeAsianHcp (39), HalftimeOverUnder (40), NextGoal (41), FirstGoalscorer (42), LastGoalscorer (43), PlayerToScore (44), FirstHalfHandicap (45), FirstHalfTotal (46), SetBetting (47), GroupBetting (48), MatchplaySingle (49), MatchplayFourball (50), MatchplayFoursome (51), TiedMatch (52), TopBatsman (53), InningsRuns (54), TotalTries (55), TotalPoints (56), FrameBetting (57), ToScoreFirst (58), ToScoreLast (59), FirstScoringPlay (60), LastScoringPlay (61), HighestScoringQtr (62), RunLine (63), RoundBetting (64), LineBetting (65)
            MarketType int64 `xml:",attr"`
            // 
            ExpectedWithdrawalSequenceNumber int64 `xml:",attr"`
    
        
            GetOrderDetailsResult GetOrderDetailsResponse
        
    
}

type GetPricesRequest struct {
    
        MarketIds int64  // sequence element
    
        // 
        ThresholdAmount int64 `xml:",attr"`
        // 
        NumberForPricesRequired int64 `xml:",attr"`
        // 
        NumberAgainstPricesRequired int64 `xml:",attr"`
        // 
        WantMarketMatchedAmount bool `xml:",attr"`
        // 
        WantSelectionsMatchedAmounts bool `xml:",attr"`
        // 
        WantSelectionMatchedDetails bool `xml:",attr"`
    
}

type GetPricesResponse struct {
        *BaseResponse
    
    
        
    
        
            GetPricesResult GetPricesResponse
        
    
}

type GetSPEnabledMarketsInformationRequest struct {
    
    
    
}

type GetSPEnabledMarketsInformationResponse struct {
        *BaseResponse
    
    
        
    
        
            GetSPEnabledMarketsInformationResult GetSPEnabledMarketsInformationResponse
        
    
}

type ListAccountPostingsByIdRequest struct {
    
    
        // 
        TransactionId int64 `xml:",attr"`
    
}

type ListAccountPostingsByIdResponse struct {
        *BaseResponse
    
    
        
            // 
            Currency string `xml:",attr"`
            // 
            AvailableFunds int64 `xml:",attr"`
            // 
            Balance int64 `xml:",attr"`
            // 
            Credit int64 `xml:",attr"`
            // 
            Exposure int64 `xml:",attr"`
    
        
            ListAccountPostingsByIdResult ListAccountPostingsByIdResponse
        
    
}

type ListAccountPostingsByIdResponseItem struct {
    
    
        // 
        PostedAt string `xml:",attr"`
        // 
        Description string `xml:",attr"`
        // 
        Amount int64 `xml:",attr"`
        // 
        ResultingBalance int64 `xml:",attr"`
        // 
        PostingCategory int64 `xml:",attr"`
        // 
        OrderId int64 `xml:",attr"`
        // 
        MarketId int64 `xml:",attr"`
        // 
        TransactionId int64 `xml:",attr"`
    
}

type ListAccountPostingsRequest struct {
    
    
        // 
        StartTime string `xml:",attr"`
        // 
        EndTime string `xml:",attr"`
    
}

type ListAccountPostingsResponse struct {
        *BaseResponse
    
    
        
            // 
            Currency string `xml:",attr"`
            // 
            AvailableFunds int64 `xml:",attr"`
            // 
            Balance int64 `xml:",attr"`
            // 
            Credit int64 `xml:",attr"`
            // 
            Exposure int64 `xml:",attr"`
            // 
            HaveAllPostingsBeenReturned bool `xml:",attr"`
    
        
            ListAccountPostingsResult ListAccountPostingsResponse
        
    
}

type ListAccountPostingsResponseItem struct {
    
    
        // 
        PostedAt string `xml:",attr"`
        // 
        Description string `xml:",attr"`
        // 
        Amount int64 `xml:",attr"`
        // 
        ResultingBalance int64 `xml:",attr"`
        // 
        PostingCategory int64 `xml:",attr"`
        // 
        OrderId int64 `xml:",attr"`
        // 
        MarketId int64 `xml:",attr"`
        // 
        TransactionId int64 `xml:",attr"`
    
}

type ListBlacklistInformationRequest struct {
    
    
    
}

type ListBlacklistInformationResponse struct {
        *BaseResponse
    
    
        
    
        
            ListBlacklistInformationResult ListBlacklistInformationResponse
        
    
}

type ListBootstrapOrdersRequest struct {
    
        SequenceNumber int64  // sequence element
        wantSettledOrdersOnUnsettledMarkets bool  // sequence element
    
    
}

type ListBootstrapOrdersResponse struct {
        *BaseResponse
    
    
        
            // 
            MaximumSequenceNumber int64 `xml:",attr"`
    
        
            ListBootstrapOrdersResult ListBootstrapOrdersResponse
        
    
}

type ListMarketWithdrawalHistoryRequest struct {
    
    
        // 
        MarketId int64 `xml:",attr"`
    
}

type ListMarketWithdrawalHistoryResponse struct {
        *BaseResponse
    
    
        
    
        
            ListMarketWithdrawalHistoryResult ListMarketWithdrawalHistoryResponse
        
    
}

type ListMarketWithdrawalHistoryResponseItem struct {
    
    
        // 
        SelectionId int64 `xml:",attr"`
        // 
        WithdrawalTime string `xml:",attr"`
        // 
        SequenceNumber int64 `xml:",attr"`
        // 
        ReductionFactor int64 `xml:",attr"`
        // 
        CompoundReductionFactor int64 `xml:",attr"`
    
}

type ListOrdersChangedSinceRequest struct {
    
        SequenceNumber int64  // sequence element
    
    
}

type ListOrdersChangedSinceResponse struct {
        *BaseResponse
    
    
        
    
        
            ListOrdersChangedSinceResult ListOrdersChangedSinceResponse
        
    
}

type ListSelectionTradesRequest struct {
    
        selectionRequests SelectionTradesRequestItem  // sequence element
    
        // 
        currency string `xml:",attr"`
    
}

type ListSelectionTradesResponse struct {
        *BaseResponse
    
    
        
    
        
            ListSelectionTradesResult ListSelectionTradesResponse
        
    
}

type ListSelectionTradesResponseItem struct {
    
        TradeItems TradeItemType  // sequence element
    
        // 
        selectionId int64 `xml:",attr"`
        // 
        maxTradeId int64 `xml:",attr"`
        // 
        maxTradeIdReturned int64 `xml:",attr"`
    
}

type ListSelectionsChangedSinceRequest struct {
    
    
        // 
        SelectionSequenceNumber int64 `xml:",attr"`
    
}

type ListSelectionsChangedSinceResponse struct {
        *BaseResponse
    
    
        
    
        
            ListSelectionsChangedSinceResult ListSelectionsChangedSinceResponse
        
    
}

type ListSelectionsChangedSinceResponseItem struct {
    
        SettlementInformation SettlementInformationType  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        DisplayOrder int64 `xml:",attr"`
        // 
        IsHidden bool `xml:",attr"`
        // 
        Status int64 `xml:",attr"`
        // 
        ResetCount int64 `xml:",attr"`
        // 
        WithdrawalFactor int64 `xml:",attr"`
        // 
        MarketId int64 `xml:",attr"`
        // 
        SelectionSequenceNumber int64 `xml:",attr"`
        // 
        CancelOrdersTime string `xml:",attr"`
    
}

type ListTopLevelEventsRequest struct {
    
    
        // 
        WantPlayMarkets bool `xml:",attr"`
    
}

type ListTopLevelEventsResponse struct {
        *BaseResponse
    
    
        
    
        
            ListTopLevelEventsResult ListTopLevelEventsResponse
        
    
}

type MarketType struct {
    
        Selections SelectionType  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        Type int64 `xml:",attr"`
        // 
        IsPlayMarket bool `xml:",attr"`
        // Inactive(1), Active(2), Suspended(3), Withdrawn(4), BallotedOut(9), Voided(5), Completed(6), Settled(8)
        Status int64 `xml:",attr"`
        // 
        NumberOfWinningSelections int64 `xml:",attr"`
        // 
        StartTime string `xml:",attr"`
        // 
        WithdrawalSequenceNumber int64 `xml:",attr"`
        // 
        DisplayOrder int64 `xml:",attr"`
        // 
        IsEnabledForMultiples bool `xml:",attr"`
        // 
        IsInRunningAllowed bool `xml:",attr"`
        // 
        RaceGrade string `xml:",attr"`
        // 
        IsManagedWhenInRunning bool `xml:",attr"`
        // 
        IsCurrentlyInRunning bool `xml:",attr"`
        // 
        InRunningDelaySeconds int64 `xml:",attr"`
        // 
        EventClassifierId int64 `xml:",attr"`
        // 
        PlacePayout int64 `xml:",attr"`
    
}

type MarketTypeWithPrices struct {
    
        Selections SelectionTypeWithPrices  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        Type int64 `xml:",attr"`
        // 
        IsPlayMarket bool `xml:",attr"`
        // 
        Status int64 `xml:",attr"`
        // 
        NumberOfWinningSelections int64 `xml:",attr"`
        // 
        StartTime string `xml:",attr"`
        // 
        WithdrawalSequenceNumber int64 `xml:",attr"`
        // 
        DisplayOrder int64 `xml:",attr"`
        // 
        IsEnabledForMultiples bool `xml:",attr"`
        // 
        IsInRunningAllowed bool `xml:",attr"`
        // 
        IsManagedWhenInRunning bool `xml:",attr"`
        // 
        IsCurrentlyInRunning bool `xml:",attr"`
        // 
        InRunningDelaySeconds int64 `xml:",attr"`
        // 
        ReturnCode int64 `xml:",attr"`
        // 
        TotalMatchedAmount int64 `xml:",attr"`
        // 
        PlacePayout int64 `xml:",attr"`
        // 
        MatchedMarketForStake int64 `xml:",attr"`
        // 
        MatchedMarketAgainstStake int64 `xml:",attr"`
        // 
        HomeTeamScore int64 `xml:",attr"`
        // 
        AwayTeamScore int64 `xml:",attr"`
        // 
        ScoreType int64 `xml:",attr"`
    
}

type MatchedOrderInformationType struct {
    
    
        // 
        MatchedStake int64 `xml:",attr"`
        // 
        MatchedAgainstStake int64 `xml:",attr"`
        // 
        PriceMatched int64 `xml:",attr"`
        // 
        MatchedOrderID int64 `xml:",attr"`
        // 
        WasMake bool `xml:",attr"`
    
}

type Offer struct {
    
        Stake int64  // sequence element
        Price  int64 // sequence element
    
    
}

type Order struct {
    
        OrderCommissionInformation OrderCommissionInformationType  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        MarketId int64 `xml:",attr"`
        // 
        SelectionId int64 `xml:",attr"`
        // 
        SequenceNumber int64 `xml:",attr"`
        // 
        IssuedAt string `xml:",attr"`
        // 
        Polarity int64 `xml:",attr"`
        // 
        UnmatchedStake int64 `xml:",attr"`
        // 
        RequestedPrice int64 `xml:",attr"`
        // 
        MatchedPrice int64 `xml:",attr"`
        // 
        MatchedStake int64 `xml:",attr"`
        // 
        TotalForSideMakeStake int64 `xml:",attr"`
        // 
        TotalForSideTakeStake int64 `xml:",attr"`
        // 
        MatchedAgainstStake int64 `xml:",attr"`
        // 
        Status int64 `xml:",attr"`
        // 
        RestrictOrderToBroker bool `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
        // 
        CancelOnInRunning bool `xml:",attr"`
        // 
        CancelIfSelectionReset bool `xml:",attr"`
        // 
        IsCurrentlyInRunning bool `xml:",attr"`
        // 
        PunterCommissionBasis int64 `xml:",attr"`
        // 
        MakeCommissionRate int64 `xml:",attr"`
        // 
        TakeCommissionRate int64 `xml:",attr"`
        // 
        ExpectedSelectionResetCount int64 `xml:",attr"`
        // 
        ExpectedWithdrawalSequenceNumber int64 `xml:",attr"`
        // 
        OrderFillType int64 `xml:",attr"`
        // 
        FillOrKillThreshold int64 `xml:",attr"`
    
}

type OrderCommissionInformationType struct {
    
    
        // 
        GrossSettlementAmount int64 `xml:",attr"`
        // 
        OrderCommission int64 `xml:",attr"`
    
}

type OrderSettlementInformationType struct {
    
    
        // 
        GrossSettlementAmount int64 `xml:",attr"`
        // 
        OrderCommission int64 `xml:",attr"`
        // 
        MarketCommission int64 `xml:",attr"`
        // 
        MarketSettledDate string `xml:",attr"`
    
}

type PlaceOrdersNoReceiptRequest struct {
    
        Orders   // sequence element
        WantAllOrNothingBehaviour bool  // sequence element
    
    
}

type PlaceOrdersNoReceiptResponse struct {
        *BaseResponse
    
    
        
    
        
            PlaceOrdersNoReceiptResult PlaceOrdersNoReceiptResponse
        
    
}

type PlaceOrdersNoReceiptResponseItem struct {
    
    
        // 
        OrderHandle int64 `xml:",attr"`
        // 
        ReturnCode int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type PlaceOrdersWithReceiptRequest struct {
    
        Orders   // sequence element
    
    
}

type PlaceOrdersWithReceiptRequestItem struct {
    
    
        // 
        SelectionId int64 `xml:",attr"`
        // 
        Stake int64 `xml:",attr"`
        // 
        Price int64 `xml:",attr"`
        // 
        Polarity int64 `xml:",attr"`
        // This value must be set to the selectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedSelectionResetCount that you submit to the server is not the same as the selectionResetCount that is on the server, then your bet will NOT be accepted, and you will get a 300 error.
        ExpectedSelectionResetCount int64 `xml:",attr"`
        // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
        ExpectedWithdrawalSequenceNumber int64 `xml:",attr"`
        // FillAndKill=2, FillOrKill=3, FillOrKillDontCancel=4, SPIfUnmatched=5
        KillType int64 `xml:",attr"`
        // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
        FillOrKillThreshold int64 `xml:",attr"`
        // 
              The effect of this option when set to true is to cancel any unmatched bets when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
              This field is required only if killType is set to FillOrKillDontCancel.
            
        CancelOnInRunning bool `xml:",attr"`
        // 
              The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
              This field is required only if killType is set to FillOrKillDontCancel.
            
        CancelIfSelectionReset bool `xml:",attr"`
        // This field is required only if killType is set to FillOrKillDontCancel. Reprice(1), Cancel(2), DontReprice(3)
        WithdrawalRepriceOption int64 `xml:",attr"`
        // 
              An expires at value set in the past will cause the bet to be cancelled - although the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
              This field is optional if killType is set to FillOrKillDontCancel, otherwise not needed at all.
            
        ExpiresAt string `xml:",attr"`
        // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
        RestrictOrderToBroker bool `xml:",attr"`
        // For internal use only
        ChannelTypeInfo string `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type PlaceOrdersWithReceiptResponse struct {
        *BaseResponse
    
    
        
    
        
            PlaceOrdersWithReceiptResult PlaceOrdersWithReceiptResponse
        
    
}

type PlaceOrdersWithReceiptResponseItem struct {
    
    
        // 
        Status int64 `xml:",attr"`
        // 
        MatchedAgainstStake int64 `xml:",attr"`
        // 
        MatchedStake int64 `xml:",attr"`
        // 
        MatchedPrice int64 `xml:",attr"`
        // 
        UnmatchedStake int64 `xml:",attr"`
        // 
        Polarity int64 `xml:",attr"`
        // 
        IssuedAt string `xml:",attr"`
        // 
        SequenceNumber int64 `xml:",attr"`
        // Deprecated attribute.
        SelectionId int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
        // 
        OrderHandle int64 `xml:",attr"`
    
}

type PricesType struct {
    
    
        // 
        Price int64 `xml:",attr"`
        // 
        Stake int64 `xml:",attr"`
    
}

type PulseRequest struct {
    
    
    
}

type PulseResponse struct {
        *BaseResponse
    
    
        
            // 
            PerformedAt string `xml:",attr"`
            // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
            HeartbeatAction int64 `xml:",attr"`
    
        
            PulseResult PulseResponse
        
    
}

type RegisterHeartbeatRequest struct {
    
    
        // 
        ThresholdMs int64 `xml:",attr"`
        // CancelOrders(1), SuspendOrders(2), SuspendPunter(3)
        HeartbeatAction int64 `xml:",attr"`
    
}

type RegisterHeartbeatResponse struct {
        *BaseResponse
    
    
        
    
        
            RegisterHeartbeatResult RegisterHeartbeatResponse
        
    
}

type ReturnStatus struct {
    
    
        // 
        Code int64 `xml:",attr"`
        // 
        Description string `xml:",attr"`
        // 
        CallId string `xml:",attr"`
        // 
        ExtraInformation string `xml:",attr"`
    
}

type SelectionTradesRequestItem struct {
    
    
        // 
        selectionId int64 `xml:",attr"`
        // 
        fromTradeId int64 `xml:",attr"`
    
}

type SelectionType struct {
    
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        Status int64 `xml:",attr"`
        // 
        ResetCount int64 `xml:",attr"`
        // 
        DeductionFactor int64 `xml:",attr"`
        // 
        DisplayOrder int64 `xml:",attr"`
    
}

type SelectionTypeWithPrices struct {
    
        ForSidePrices PricesType  // sequence element
        AgainstSidePrices PricesType  // sequence element
    
        // 
        Id int64 `xml:",attr"`
        // 
        Name string `xml:",attr"`
        // 
        Status int64 `xml:",attr"`
        // 
        ResetCount int64 `xml:",attr"`
        // 
        DeductionFactor int64 `xml:",attr"`
        // 
        MatchedSelectionForStake int64 `xml:",attr"`
        // 
        SelectionOpenInterest int64 `xml:",attr"`
        // 
        MarketWinnings int64 `xml:",attr"`
        // 
        MarketPositiveWinnings int64 `xml:",attr"`
        // 
        MatchedSelectionAgainstStake int64 `xml:",attr"`
        // 
        LastMatchedOccurredAt string `xml:",attr"`
        // 
        LastMatchedPrice int64 `xml:",attr"`
        // 
        LastMatchedForSideAmount int64 `xml:",attr"`
        // 
        LastMatchedAgainstSideAmount int64 `xml:",attr"`
        // 
        MatchedForSideAmountAtSamePrice int64 `xml:",attr"`
        // 
        MatchedAgainstSideAmountAtSamePrice int64 `xml:",attr"`
        // 
        FirstMatchAtSamePriceOccurredAt string `xml:",attr"`
        // 
        NumberOrders int64 `xml:",attr"`
        // 
        NumberPunters int64 `xml:",attr"`
    
}

type SettlementInformationType struct {
    
    
        // 
        SettledTime string `xml:",attr"`
        // 
        VoidPercentage int64 `xml:",attr"`
        // 
        LeftSideFactor int64 `xml:",attr"`
        // 
        RightSideFactor int64 `xml:",attr"`
        // 
        SettlementResultString string `xml:",attr"`
    
}

type SimpleOrderRequest struct {
    
    
        // 
        SelectionId int64 `xml:",attr"`
        // 
        Stake int64 `xml:",attr"`
        // 
        Price int64 `xml:",attr"`
        // 
        Polarity int64 `xml:",attr"`
        // This value must be set to the SelectionResetCount value that is in the Selection object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the ExpectedSelectionResetCount that you submit to the server is not the same as the SelectionResetCount that is on the server, then your bet will NOT be accepted, and you will get an error.
        ExpectedSelectionResetCount int64 `xml:",attr"`
        // This value should be set to the withdrawalSequenceNumber value that is in the Market object that is returned by GetMarketInformation and GetPrices.  The purpose of this is to ensure that you are aware of the state of the market before placing a bet.  If the expectedWithdrawalSequenceNumbert that you submit to the server is not the same as the withdrawalSequenceNumber that is on the server, then your bet WILL be accepted, but it will be repriced to allow for the fact that there are more or less selections available on the market than you believed.
        ExpectedWithdrawalSequenceNumber int64 `xml:",attr"`
        // The effect of this option when set to true is to cancel any unmatched orders when the market changes to an in-running market.  This option only applies while the market is NOT in-running.  When the market turns in-running, this option will have no effect.
        CancelOnInRunning bool `xml:",attr"`
        // The effect of this option is to cancel any unmatched bets if the selection is reset.  This can occur when the Market is reset (eg a goal is scored in an in-running market).  This defaults to true - unmatched bets will be cancelled if an event occurs in the market such that Betdaq forces the market to be reset
        CancelIfSelectionReset bool `xml:",attr"`
        // An expires at value set in the past will cause the bet to be cancelled - although  the bet status will not immediately be set to Cancelled (this will occur in several moments on the exchange), the bet will not be available for matching.
        ExpiresAt string `xml:",attr"`
        // Reprice(1), Cancel(2), DontReprice(3)
        WithdrawalRepriceOption int64 `xml:",attr"`
        // 
        KillType int64 `xml:",attr"`
        // This field is required only if killType is set to FillOrKill or FillOrKillDontCancel.
        FillOrKillThreshold int64 `xml:",attr"`
        // Deprecated - This field is required only if killType is set to FillOrKillDontCancel.
        RestrictOrderToBroker bool `xml:",attr"`
        // For internal use only
        ChannelTypeInfo string `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type SuspendAllOrdersOnMarketRequest struct {
    
    
        // 
        MarketId int64 `xml:",attr"`
    
}

type SuspendAllOrdersOnMarketResponse struct {
        *BaseResponse
    
    
        
    
        
            SuspendAllOrdersOnMarketResult SuspendAllOrdersOnMarketResponse
        
    
}

type SuspendAllOrdersRequest struct {
    
    
    
}

type SuspendAllOrdersResponse struct {
        *BaseResponse
    
    
        
    
        
            SuspendAllOrdersResult SuspendAllOrdersResponse
        
    
}

type SuspendFromTradingRequest struct {
    
    
    
}

type SuspendFromTradingResponse struct {
        *BaseResponse
    
    
        
    
        
            SuspendFromTradingResult SuspendFromTradingResponse
        
    
}

type SuspendOrdersRequest struct {
    
        OrderIds int64  // sequence element
    
    
}

type SuspendOrdersResponse struct {
        *BaseResponse
    
    
        
    
        
            SuspendOrdersResult SuspendOrdersResponse
        
    
}

type SuspendOrdersResponseItem struct {
    
    
        // 
        OrderId int64 `xml:",attr"`
        // 
        SuspendedForSideStake int64 `xml:",attr"`
        // 
        PunterReferenceNumber int64 `xml:",attr"`
    
}

type TradeItemType struct {
    
    
        // 
        occurredAt string `xml:",attr"`
        // 
        price int64 `xml:",attr"`
        // 
        backersStake int64 `xml:",attr"`
        // 
        layersLiability int64 `xml:",attr"`
        // Back(1), Lay(2)
        tradeType int64 `xml:",attr"`
    
}

type UnsuspendFromTradingRequest struct {
    
    
    
}

type UnsuspendFromTradingResponse struct {
        *BaseResponse
    
    
        
    
        
            UnsuspendFromTradingResult UnsuspendFromTradingResponse
        
    
}

type UnsuspendOrdersRequest struct {
    
        OrderIds int64  // sequence element
    
    
}

type UnsuspendOrdersResponse struct {
        *BaseResponse
    
    
        
    
        
            UnsuspendOrdersResult UnsuspendOrdersResponse
        
    
}

type UpdateOrdersNoReceiptRequest struct {
    
        Orders   // sequence element
    
    
}

type UpdateOrdersNoReceiptRequestItem struct {
    
    
        // 
        BetId int64 `xml:",attr"`
        // 
        DeltaStake int64 `xml:",attr"`
        // 
        Price int64 `xml:",attr"`
        // 
        ExpectedSelectionResetCount int64 `xml:",attr"`
        // 
        ExpectedWithdrawalSequenceNumber int64 `xml:",attr"`
        // 
        CancelOnInRunning bool `xml:",attr"`
        // 
        CancelIfSelectionReset bool `xml:",attr"`
        // 
        SetToBeSPIfUnmatched bool `xml:",attr"`
    
}

type UpdateOrdersNoReceiptResponse struct {
        *BaseResponse
    
    
        
    
        
            UpdateOrdersNoReceiptResult UpdateOrdersNoReceiptResponse
        
    
}

type UpdateOrdersNoReceiptResponseItem struct {
    
    
        // 
        BetId int64 `xml:",attr"`
        // 
        ReturnCode int64 `xml:",attr"`
    
}

