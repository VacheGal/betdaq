// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package api

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/james-wilder/betdaq/soap"
)

const (
	ReadOnlyService = "http://api.betdaq.com/v2.0/ReadOnlyService.asmx"
	SecureService   = "https://api.betdaq.com/v2.0/Secure/SecureService.asmx"
)

type BetdaqClient struct {
	Username string
	Password string
}

func NewBetdaqClient(username string, password string) *BetdaqClient {
	return &BetdaqClient{
		Username: username,
		Password: password,
	}
}

{{range .Functions}}
// {{.Name}} - {{.Documentation}}
func (c *BetdaqClient) Call{{ .Name }} (request {{.ParameterStruct}}) (*{{ .ReturnType }}, error) {
	fmt.Println("{{.Name}}")

	var (
		response {{.ReturnType}}
	)

	err := c.doApiCall(request, &response, {{.Service}})
	if err != nil {
		return nil, err
	}

	if response.{{.ReturnStatusContainerName}}.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.{{.ReturnStatusContainerName}}.ReturnStatus[0].Code,
			response.{{.ReturnStatusContainerName}}.ReturnStatus[0].Description,
			response.{{.ReturnStatusContainerName}}.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}
{{end}}

func (c *BetdaqClient) doApiCall(request, response interface{}, url string) error {
	soapRequest, err := soap.Encode(request, c.Username, c.Password)
	fmt.Println(string(soapRequest))
	if err != nil {
		fmt.Println(err)
		return err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(soapRequest))

	req.Header.Add("Content-Type", "text/xml; charset=utf-8")

	httpClient := http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return err
	}

	fmt.Println("HTTP response status:", resp.Status)
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return err
	}
	fmt.Println(string(body))

	err = soap.Decode(body, &response)
	if err != nil {
		fmt.Println(err)
		return err
	}

	return nil
}

