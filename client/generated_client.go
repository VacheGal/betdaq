// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-04-17 17:46:01.018384 +0100 BST m=+0.056820190
package betdaq

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/james-wilder/betdaq/model"
	"github.com/james-wilder/betdaq/soap"
)

const (
	ReadOnlyService = "http://api.betdaq.com/v2.0/ReadOnlyService.asmx"
	SecureService   = "https://api.betdaq.com/v2.0/Secure/SecureService.asmx"
)

type BetdaqClient struct {
	Username string
	Password string
}

func NewClient(username string, password string) *BetdaqClient {
	return &BetdaqClient{
		Username: username,
		Password: password,
	}
}


// CancelAllOrders - Cancels all unmatched orders across all markets.
func (c *BetdaqClient) CancelAllOrders(request model.CancelAllOrders) (*model.CancelAllOrdersResponse, error) {
	// fmt.Println("CancelAllOrders")

	var (
		response model.CancelAllOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.CancelAllOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.CancelAllOrdersResult.ReturnStatus[0].Code,
			response.CancelAllOrdersResult.ReturnStatus[0].Description,
			response.CancelAllOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// CancelAllOrdersOnMarket - Cancels all unmatched orders for specified markets.
func (c *BetdaqClient) CancelAllOrdersOnMarket(request model.CancelAllOrdersOnMarket) (*model.CancelAllOrdersOnMarketResponse, error) {
	// fmt.Println("CancelAllOrdersOnMarket")

	var (
		response model.CancelAllOrdersOnMarketResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.CancelAllOrdersOnMarketResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.CancelAllOrdersOnMarketResult.ReturnStatus[0].Code,
			response.CancelAllOrdersOnMarketResult.ReturnStatus[0].Description,
			response.CancelAllOrdersOnMarketResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// CancelOrders - Cancels one or more orders on the exchange.
func (c *BetdaqClient) CancelOrders(request model.CancelOrders) (*model.CancelOrdersResponse, error) {
	// fmt.Println("CancelOrders")

	var (
		response model.CancelOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.CancelOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.CancelOrdersResult.ReturnStatus[0].Code,
			response.CancelOrdersResult.ReturnStatus[0].Description,
			response.CancelOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ChangeHeartbeatRegistration - Change HeartBeat registration.
func (c *BetdaqClient) ChangeHeartbeatRegistration(request model.ChangeHeartbeatRegistration) (*model.ChangeHeartbeatRegistrationResponse, error) {
	// fmt.Println("ChangeHeartbeatRegistration")

	var (
		response model.ChangeHeartbeatRegistrationResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ChangeHeartbeatRegistrationResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ChangeHeartbeatRegistrationResult.ReturnStatus[0].Code,
			response.ChangeHeartbeatRegistrationResult.ReturnStatus[0].Description,
			response.ChangeHeartbeatRegistrationResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ChangePassword - Change password on the current account.
func (c *BetdaqClient) ChangePassword(request model.ChangePassword) (*model.ChangePasswordResponse, error) {
	// fmt.Println("ChangePassword")

	var (
		response model.ChangePasswordResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ChangePasswordResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ChangePasswordResult.ReturnStatus[0].Code,
			response.ChangePasswordResult.ReturnStatus[0].Description,
			response.ChangePasswordResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// DeregisterHeartbeat - Deteles HeartBeat registration.
func (c *BetdaqClient) DeregisterHeartbeat(request model.DeregisterHeartbeat) (*model.DeregisterHeartbeatResponse, error) {
	// fmt.Println("DeregisterHeartbeat")

	var (
		response model.DeregisterHeartbeatResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.DeregisterHeartbeatResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.DeregisterHeartbeatResult.ReturnStatus[0].Code,
			response.DeregisterHeartbeatResult.ReturnStatus[0].Description,
			response.DeregisterHeartbeatResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetAccountBalances - Returns an account summary for the current punter.
func (c *BetdaqClient) GetAccountBalances(request model.GetAccountBalances) (*model.GetAccountBalancesResponse, error) {
	// fmt.Println("GetAccountBalances")

	var (
		response model.GetAccountBalancesResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.GetAccountBalancesResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetAccountBalancesResult.ReturnStatus[0].Code,
			response.GetAccountBalancesResult.ReturnStatus[0].Description,
			response.GetAccountBalancesResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetCurrentSelectionSequenceNumber - Returns the maximum selection sequence number.
func (c *BetdaqClient) GetCurrentSelectionSequenceNumber(request model.GetCurrentSelectionSequenceNumber) (*model.GetCurrentSelectionSequenceNumberResponse, error) {
	// fmt.Println("GetCurrentSelectionSequenceNumber")

	var (
		response model.GetCurrentSelectionSequenceNumberResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetCurrentSelectionSequenceNumberResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetCurrentSelectionSequenceNumberResult.ReturnStatus[0].Code,
			response.GetCurrentSelectionSequenceNumberResult.ReturnStatus[0].Description,
			response.GetCurrentSelectionSequenceNumberResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetEventSubTreeNoSelections - Returns the tree of events and markets.
func (c *BetdaqClient) GetEventSubTreeNoSelections(request model.GetEventSubTreeNoSelections) (*model.GetEventSubTreeNoSelectionsResponse, error) {
	// fmt.Println("GetEventSubTreeNoSelections")

	var (
		response model.GetEventSubTreeNoSelectionsResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetEventSubTreeNoSelectionsResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetEventSubTreeNoSelectionsResult.ReturnStatus[0].Code,
			response.GetEventSubTreeNoSelectionsResult.ReturnStatus[0].Description,
			response.GetEventSubTreeNoSelectionsResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetEventSubTreeWithSelections - Returns the tree of events and markets.
func (c *BetdaqClient) GetEventSubTreeWithSelections(request model.GetEventSubTreeWithSelections) (*model.GetEventSubTreeWithSelectionsResponse, error) {
	// fmt.Println("GetEventSubTreeWithSelections")

	var (
		response model.GetEventSubTreeWithSelectionsResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetEventSubTreeWithSelectionsResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetEventSubTreeWithSelectionsResult.ReturnStatus[0].Code,
			response.GetEventSubTreeWithSelectionsResult.ReturnStatus[0].Description,
			response.GetEventSubTreeWithSelectionsResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetMarketInformation - Returns the tree of events and markets.
func (c *BetdaqClient) GetMarketInformation(request model.GetMarketInformation) (*model.GetMarketInformationResponse, error) {
	// fmt.Println("GetMarketInformation")

	var (
		response model.GetMarketInformationResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetMarketInformationResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetMarketInformationResult.ReturnStatus[0].Code,
			response.GetMarketInformationResult.ReturnStatus[0].Description,
			response.GetMarketInformationResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetOddsLadder - Returns the current odds ladder in requested price format."
func (c *BetdaqClient) GetOddsLadder(request model.GetOddsLadder) (*model.GetOddsLadderResponse, error) {
	// fmt.Println("GetOddsLadder")

	var (
		response model.GetOddsLadderResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetOddsLadderResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetOddsLadderResult.ReturnStatus[0].Code,
			response.GetOddsLadderResult.ReturnStatus[0].Description,
			response.GetOddsLadderResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetOrderDetails - Gets detailed information about an order.
func (c *BetdaqClient) GetOrderDetails(request model.GetOrderDetails) (*model.GetOrderDetailsResponse, error) {
	// fmt.Println("GetOrderDetails")

	var (
		response model.GetOrderDetailsResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.GetOrderDetailsResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetOrderDetailsResult.ReturnStatus[0].Code,
			response.GetOrderDetailsResult.ReturnStatus[0].Description,
			response.GetOrderDetailsResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetPrices - Returns the prices for the specified markets.
func (c *BetdaqClient) GetPrices(request model.GetPrices) (*model.GetPricesResponse, error) {
	// fmt.Println("GetPrices")

	var (
		response model.GetPricesResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetPricesResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetPricesResult.ReturnStatus[0].Code,
			response.GetPricesResult.ReturnStatus[0].Description,
			response.GetPricesResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// GetSPEnabledMarketsInformation - Returns information defining which markets are enabled for starting-price orders.
func (c *BetdaqClient) GetSPEnabledMarketsInformation(request model.GetSPEnabledMarketsInformation) (*model.GetSPEnabledMarketsInformationResponse, error) {
	// fmt.Println("GetSPEnabledMarketsInformation")

	var (
		response model.GetSPEnabledMarketsInformationResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.GetSPEnabledMarketsInformationResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.GetSPEnabledMarketsInformationResult.ReturnStatus[0].Code,
			response.GetSPEnabledMarketsInformationResult.ReturnStatus[0].Description,
			response.GetSPEnabledMarketsInformationResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListAccountPostings - Returns an account summary and details of orders placed for the current punter.
func (c *BetdaqClient) ListAccountPostings(request model.ListAccountPostings) (*model.ListAccountPostingsResponse, error) {
	// fmt.Println("ListAccountPostings")

	var (
		response model.ListAccountPostingsResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ListAccountPostingsResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListAccountPostingsResult.ReturnStatus[0].Code,
			response.ListAccountPostingsResult.ReturnStatus[0].Description,
			response.ListAccountPostingsResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListAccountPostingsById - Returns an account summary and details of orders placed for the current punter.
func (c *BetdaqClient) ListAccountPostingsById(request model.ListAccountPostingsById) (*model.ListAccountPostingsByIdResponse, error) {
	// fmt.Println("ListAccountPostingsById")

	var (
		response model.ListAccountPostingsByIdResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ListAccountPostingsByIdResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListAccountPostingsByIdResult.ReturnStatus[0].Code,
			response.ListAccountPostingsByIdResult.ReturnStatus[0].Description,
			response.ListAccountPostingsByIdResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListBlacklistInformation - List blacklist information of the current punter.
func (c *BetdaqClient) ListBlacklistInformation(request model.ListBlacklistInformation) (*model.ListBlacklistInformationResponse, error) {
	// fmt.Println("ListBlacklistInformation")

	var (
		response model.ListBlacklistInformationResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ListBlacklistInformationResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListBlacklistInformationResult.ReturnStatus[0].Code,
			response.ListBlacklistInformationResult.ReturnStatus[0].Description,
			response.ListBlacklistInformationResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListBootstrapOrders - Returns bootstrap orders that have a sequence number greater than the sequence number specified.
func (c *BetdaqClient) ListBootstrapOrders(request model.ListBootstrapOrders) (*model.ListBootstrapOrdersResponse, error) {
	// fmt.Println("ListBootstrapOrders")

	var (
		response model.ListBootstrapOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ListBootstrapOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListBootstrapOrdersResult.ReturnStatus[0].Code,
			response.ListBootstrapOrdersResult.ReturnStatus[0].Description,
			response.ListBootstrapOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListMarketWithdrawalHistory - Returns history of withdrawals for a given market.
func (c *BetdaqClient) ListMarketWithdrawalHistory(request model.ListMarketWithdrawalHistory) (*model.ListMarketWithdrawalHistoryResponse, error) {
	// fmt.Println("ListMarketWithdrawalHistory")

	var (
		response model.ListMarketWithdrawalHistoryResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.ListMarketWithdrawalHistoryResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListMarketWithdrawalHistoryResult.ReturnStatus[0].Code,
			response.ListMarketWithdrawalHistoryResult.ReturnStatus[0].Description,
			response.ListMarketWithdrawalHistoryResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListOrdersChangedSince - Returns a list of orders that have changed since a given sequence number.
func (c *BetdaqClient) ListOrdersChangedSince(request model.ListOrdersChangedSince) (*model.ListOrdersChangedSinceResponse, error) {
	// fmt.Println("ListOrdersChangedSince")

	var (
		response model.ListOrdersChangedSinceResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.ListOrdersChangedSinceResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListOrdersChangedSinceResult.ReturnStatus[0].Code,
			response.ListOrdersChangedSinceResult.ReturnStatus[0].Description,
			response.ListOrdersChangedSinceResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListSelectionTrades - Returns the history of trades on the selection(s) specified.
func (c *BetdaqClient) ListSelectionTrades(request model.ListSelectionTrades) (*model.ListSelectionTradesResponse, error) {
	// fmt.Println("ListSelectionTrades")

	var (
		response model.ListSelectionTradesResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.ListSelectionTradesResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListSelectionTradesResult.ReturnStatus[0].Code,
			response.ListSelectionTradesResult.ReturnStatus[0].Description,
			response.ListSelectionTradesResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListSelectionsChangedSince - Returns the selections with a sequence number greater than the sequence number provided.
func (c *BetdaqClient) ListSelectionsChangedSince(request model.ListSelectionsChangedSince) (*model.ListSelectionsChangedSinceResponse, error) {
	// fmt.Println("ListSelectionsChangedSince")

	var (
		response model.ListSelectionsChangedSinceResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.ListSelectionsChangedSinceResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListSelectionsChangedSinceResult.ReturnStatus[0].Code,
			response.ListSelectionsChangedSinceResult.ReturnStatus[0].Description,
			response.ListSelectionsChangedSinceResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// ListTopLevelEvents - Returns the set of top level events that are currently active.
func (c *BetdaqClient) ListTopLevelEvents(request model.ListTopLevelEvents) (*model.ListTopLevelEventsResponse, error) {
	// fmt.Println("ListTopLevelEvents")

	var (
		response model.ListTopLevelEventsResponse
	)

	err := c.doApiCall(request, &response, ReadOnlyService)
	if err != nil {
		return nil, err
	}

	if response.ListTopLevelEventsResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.ListTopLevelEventsResult.ReturnStatus[0].Code,
			response.ListTopLevelEventsResult.ReturnStatus[0].Description,
			response.ListTopLevelEventsResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// PlaceOrdersNoReceipt - Places one or more orders on the exchange.
func (c *BetdaqClient) PlaceOrdersNoReceipt(request model.PlaceOrdersNoReceipt) (*model.PlaceOrdersNoReceiptResponse, error) {
	// fmt.Println("PlaceOrdersNoReceipt")

	var (
		response model.PlaceOrdersNoReceiptResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.PlaceOrdersNoReceiptResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.PlaceOrdersNoReceiptResult.ReturnStatus[0].Code,
			response.PlaceOrdersNoReceiptResult.ReturnStatus[0].Description,
			response.PlaceOrdersNoReceiptResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// PlaceOrdersWithReceipt - Places one or more orders on the exchange and waits for response from exchange.
func (c *BetdaqClient) PlaceOrdersWithReceipt(request model.PlaceOrdersWithReceipt) (*model.PlaceOrdersWithReceiptResponse, error) {
	// fmt.Println("PlaceOrdersWithReceipt")

	var (
		response model.PlaceOrdersWithReceiptResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.PlaceOrdersWithReceiptResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.PlaceOrdersWithReceiptResult.ReturnStatus[0].Code,
			response.PlaceOrdersWithReceiptResult.ReturnStatus[0].Description,
			response.PlaceOrdersWithReceiptResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// Pulse - Pulse.
func (c *BetdaqClient) Pulse(request model.Pulse) (*model.PulseResponse, error) {
	// fmt.Println("Pulse")

	var (
		response model.PulseResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.PulseResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.PulseResult.ReturnStatus[0].Code,
			response.PulseResult.ReturnStatus[0].Description,
			response.PulseResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// RegisterHeartbeat - Register HeartBeat.
func (c *BetdaqClient) RegisterHeartbeat(request model.RegisterHeartbeat) (*model.RegisterHeartbeatResponse, error) {
	// fmt.Println("RegisterHeartbeat")

	var (
		response model.RegisterHeartbeatResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.RegisterHeartbeatResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.RegisterHeartbeatResult.ReturnStatus[0].Code,
			response.RegisterHeartbeatResult.ReturnStatus[0].Description,
			response.RegisterHeartbeatResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// SuspendAllOrders - Suspends one or more Orders.
func (c *BetdaqClient) SuspendAllOrders(request model.SuspendAllOrders) (*model.SuspendAllOrdersResponse, error) {
	// fmt.Println("SuspendAllOrders")

	var (
		response model.SuspendAllOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.SuspendAllOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.SuspendAllOrdersResult.ReturnStatus[0].Code,
			response.SuspendAllOrdersResult.ReturnStatus[0].Description,
			response.SuspendAllOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// SuspendAllOrdersOnMarket - Suspends all unmatched orders on a market.
func (c *BetdaqClient) SuspendAllOrdersOnMarket(request model.SuspendAllOrdersOnMarket) (*model.SuspendAllOrdersOnMarketResponse, error) {
	// fmt.Println("SuspendAllOrdersOnMarket")

	var (
		response model.SuspendAllOrdersOnMarketResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.SuspendAllOrdersOnMarketResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.SuspendAllOrdersOnMarketResult.ReturnStatus[0].Code,
			response.SuspendAllOrdersOnMarketResult.ReturnStatus[0].Description,
			response.SuspendAllOrdersOnMarketResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// SuspendFromTrading - Suspend any of your orders from being matched.
func (c *BetdaqClient) SuspendFromTrading(request model.SuspendFromTrading) (*model.SuspendFromTradingResponse, error) {
	// fmt.Println("SuspendFromTrading")

	var (
		response model.SuspendFromTradingResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.SuspendFromTradingResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.SuspendFromTradingResult.ReturnStatus[0].Code,
			response.SuspendFromTradingResult.ReturnStatus[0].Description,
			response.SuspendFromTradingResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// SuspendOrders - Suspends one or more Orders.
func (c *BetdaqClient) SuspendOrders(request model.SuspendOrders) (*model.SuspendOrdersResponse, error) {
	// fmt.Println("SuspendOrders")

	var (
		response model.SuspendOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.SuspendOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.SuspendOrdersResult.ReturnStatus[0].Code,
			response.SuspendOrdersResult.ReturnStatus[0].Description,
			response.SuspendOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// UnsuspendFromTrading - Unsuspend yourself from being suspending from trading.
func (c *BetdaqClient) UnsuspendFromTrading(request model.UnsuspendFromTrading) (*model.UnsuspendFromTradingResponse, error) {
	// fmt.Println("UnsuspendFromTrading")

	var (
		response model.UnsuspendFromTradingResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.UnsuspendFromTradingResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.UnsuspendFromTradingResult.ReturnStatus[0].Code,
			response.UnsuspendFromTradingResult.ReturnStatus[0].Description,
			response.UnsuspendFromTradingResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// UnsuspendOrders - Unsuspends one or more suspended Orders.
func (c *BetdaqClient) UnsuspendOrders(request model.UnsuspendOrders) (*model.UnsuspendOrdersResponse, error) {
	// fmt.Println("UnsuspendOrders")

	var (
		response model.UnsuspendOrdersResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.UnsuspendOrdersResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.UnsuspendOrdersResult.ReturnStatus[0].Code,
			response.UnsuspendOrdersResult.ReturnStatus[0].Description,
			response.UnsuspendOrdersResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}

// UpdateOrdersNoReceipt - Updates one or more orders on the exchange without waiting for a response.
func (c *BetdaqClient) UpdateOrdersNoReceipt(request model.UpdateOrdersNoReceipt) (*model.UpdateOrdersNoReceiptResponse, error) {
	// fmt.Println("UpdateOrdersNoReceipt")

	var (
		response model.UpdateOrdersNoReceiptResponse
	)

	err := c.doApiCall(request, &response, SecureService)
	if err != nil {
		return nil, err
	}

	if response.UpdateOrdersNoReceiptResult.ReturnStatus[0].Code != 0 {
		return nil, fmt.Errorf("API returned code %d (description:\"%s\", extra information:\"%s\")",
			response.UpdateOrdersNoReceiptResult.ReturnStatus[0].Code,
			response.UpdateOrdersNoReceiptResult.ReturnStatus[0].Description,
			response.UpdateOrdersNoReceiptResult.ReturnStatus[0].ExtraInformation)
	}

	return &response, err
}


func (c *BetdaqClient) doApiCall(request, response interface{}, url string) error {
	soapRequest, err := soap.Encode(request, c.Username, c.Password)
	// fmt.Println(string(soapRequest))
	if err != nil {
		fmt.Println(err)
		return err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(soapRequest))

	req.Header.Add("Content-Type", "text/xml; charset=utf-8")

	httpClient := http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// fmt.Println("HTTP response status:", resp.Status)
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return err
	}
	// fmt.Println(string(body))

	err = soap.Decode(body, &response)
	if err != nil {
		fmt.Println(err)
		return err
	}

	return nil
}

